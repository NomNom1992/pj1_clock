
pj1_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800382c  0800382c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800382c  0800382c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000078  080038ac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080038ac  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004dd3  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017a8  00000000  00000000  00024eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00026660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000493  00000000  00000000  00026cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017334  00000000  00000000  00027143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007aa6  00000000  00000000  0003e477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000820b8  00000000  00000000  00045f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c0c  00000000  00000000  000c7fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c9be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080036e0 	.word	0x080036e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080036e0 	.word	0x080036e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_Init>:

 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000160:	f000 f870 	bl	8000244 <Lcd_configure>
			lcd_write_command(0x33);
 8000164:	2033      	movs	r0, #51	; 0x33
 8000166:	f000 f911 	bl	800038c <lcd_write_command>
			lcd_write_command(0x32);
 800016a:	2032      	movs	r0, #50	; 0x32
 800016c:	f000 f90e 	bl	800038c <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8000170:	2028      	movs	r0, #40	; 0x28
 8000172:	f000 f90b 	bl	800038c <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 8000176:	2001      	movs	r0, #1
 8000178:	f000 f908 	bl	800038c <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800017c:	200c      	movs	r0, #12
 800017e:	f000 f905 	bl	800038c <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 8000182:	2006      	movs	r0, #6
 8000184:	f000 f902 	bl	800038c <lcd_write_command>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}

0800018c <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b086      	sub	sp, #24
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000194:	f107 030c 	add.w	r3, r7, #12
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	4906      	ldr	r1, [pc, #24]	; (80001b4 <Lcd_write_int+0x28>)
 800019c:	4618      	mov	r0, r3
 800019e:	f002 fded 	bl	8002d7c <siprintf>
	Lcd_write_string(buffer);
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f806 	bl	80001b8 <Lcd_write_string>
}
 80001ac:	bf00      	nop
 80001ae:	3718      	adds	r7, #24
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	080036f8 	.word	0x080036f8

080001b8 <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 80001b8:	b590      	push	{r4, r7, lr}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	73fb      	strb	r3, [r7, #15]
 80001c4:	e009      	b.n	80001da <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4413      	add	r3, r2
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 f8fc 	bl	80003cc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	3301      	adds	r3, #1
 80001d8:	73fb      	strb	r3, [r7, #15]
 80001da:	7bfc      	ldrb	r4, [r7, #15]
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f7ff ffb5 	bl	800014c <strlen>
 80001e2:	4603      	mov	r3, r0
 80001e4:	429c      	cmp	r4, r3
 80001e6:	d3ee      	bcc.n	80001c6 <Lcd_write_string+0xe>
	}
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd90      	pop	{r4, r7, pc}

080001f2 <Lcd_clear_display>:

/**
 * Clear the screen
 */
void Lcd_clear_display(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f000 f8c8 	bl	800038c <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}

08000200 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
#if LINES == 1
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d107      	bne.n	8000226 <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8b4 	bl	800038c <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 8000224:	e00a      	b.n	800023c <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	3340      	adds	r3, #64	; 0x40
 800022a:	b2db      	uxtb	r3, r3
 800022c:	b25b      	sxtb	r3, r3
 800022e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000232:	b25b      	sxtb	r3, r3
 8000234:	b2db      	uxtb	r3, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f8a8 	bl	800038c <lcd_write_command>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b49      	ldr	r3, [pc, #292]	; (8000380 <Lcd_configure+0x13c>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a48      	ldr	r2, [pc, #288]	; (8000380 <Lcd_configure+0x13c>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b46      	ldr	r3, [pc, #280]	; (8000380 <Lcd_configure+0x13c>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000270:	4b43      	ldr	r3, [pc, #268]	; (8000380 <Lcd_configure+0x13c>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a42      	ldr	r2, [pc, #264]	; (8000380 <Lcd_configure+0x13c>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b40      	ldr	r3, [pc, #256]	; (8000380 <Lcd_configure+0x13c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0308 	and.w	r3, r3, #8
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <Lcd_configure+0x13c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a3c      	ldr	r2, [pc, #240]	; (8000380 <Lcd_configure+0x13c>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b3a      	ldr	r3, [pc, #232]	; (8000380 <Lcd_configure+0x13c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]

	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 80002a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a6:	2301      	movs	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ae:	2303      	movs	r3, #3
 80002b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	4619      	mov	r1, r3
 80002b8:	4832      	ldr	r0, [pc, #200]	; (8000384 <Lcd_configure+0x140>)
 80002ba:	f001 f8cb 	bl	8001454 <HAL_GPIO_Init>

		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	4619      	mov	r1, r3
 80002d6:	482b      	ldr	r0, [pc, #172]	; (8000384 <Lcd_configure+0x140>)
 80002d8:	f001 f8bc 	bl	8001454 <HAL_GPIO_Init>


	 //Configure RW_PIN

	GPIO_InitStruct.Pin = RW_Pin;
 80002dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ea:	2303      	movs	r3, #3
 80002ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	4823      	ldr	r0, [pc, #140]	; (8000384 <Lcd_configure+0x140>)
 80002f6:	f001 f8ad 	bl	8001454 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000300:	4820      	ldr	r0, [pc, #128]	; (8000384 <Lcd_configure+0x140>)
 8000302:	f001 fa42 	bl	800178a <HAL_GPIO_WritePin>


	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 8000306:	2320      	movs	r3, #32
 8000308:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000312:	2303      	movs	r3, #3
 8000314:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	481a      	ldr	r0, [pc, #104]	; (8000388 <Lcd_configure+0x144>)
 800031e:	f001 f899 	bl	8001454 <HAL_GPIO_Init>

	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 8000322:	2340      	movs	r3, #64	; 0x40
 8000324:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800032e:	2303      	movs	r3, #3
 8000330:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4813      	ldr	r0, [pc, #76]	; (8000388 <Lcd_configure+0x144>)
 800033a:	f001 f88b 	bl	8001454 <HAL_GPIO_Init>

	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <Lcd_configure+0x144>)
 8000356:	f001 f87d 	bl	8001454 <HAL_GPIO_Init>

	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 800035a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000368:	2303      	movs	r3, #3
 800036a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <Lcd_configure+0x144>)
 8000374:	f001 f86e 	bl	8001454 <HAL_GPIO_Init>

}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00

0800038c <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	480a      	ldr	r0, [pc, #40]	; (80003c8 <lcd_write_command+0x3c>)
 800039e:	f001 f9f4 	bl	800178a <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	091b      	lsrs	r3, r3, #4
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2104      	movs	r1, #4
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f82e 	bl	800040c <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	f003 030f 	and.w	r3, r3, #15
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2104      	movs	r1, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f826 	bl	800040c <lcd_write>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40010800 	.word	0x40010800

080003cc <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003dc:	480a      	ldr	r0, [pc, #40]	; (8000408 <lcd_write_data+0x3c>)
 80003de:	f001 f9d4 	bl	800178a <HAL_GPIO_WritePin>

	  lcd_write(data >> 4, LCD_NIB);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	091b      	lsrs	r3, r3, #4
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2104      	movs	r1, #4
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f80e 	bl	800040c <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	f003 030f 	and.w	r3, r3, #15
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2104      	movs	r1, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f806 	bl	800040c <lcd_write>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40010800 	.word	0x40010800

0800040c <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	e023      	b.n	800046a <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	fa42 f303 	asr.w	r3, r2, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10c      	bne.n	800044c <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	4a18      	ldr	r2, [pc, #96]	; (8000498 <lcd_write+0x8c>)
 8000436:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <lcd_write+0x90>)
 800043e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	f001 f9a0 	bl	800178a <HAL_GPIO_WritePin>
 800044a:	e00b      	b.n	8000464 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <lcd_write+0x8c>)
 8000450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	4a11      	ldr	r2, [pc, #68]	; (800049c <lcd_write+0x90>)
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	f001 f993 	bl	800178a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	3301      	adds	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
 800046a:	7bfa      	ldrb	r2, [r7, #15]
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	429a      	cmp	r2, r3
 8000470:	d3d7      	bcc.n	8000422 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	4809      	ldr	r0, [pc, #36]	; (80004a0 <lcd_write+0x94>)
 800047a:	f001 f986 	bl	800178a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f000 fee0 	bl	8001244 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <lcd_write+0x94>)
 800048c:	f001 f97d 	bl	800178a <HAL_GPIO_WritePin>
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000000 	.word	0x20000000
 800049c:	20000010 	.word	0x20000010
 80004a0:	40010800 	.word	0x40010800

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sTime.Hours = 9;
 80004aa:	4bb2      	ldr	r3, [pc, #712]	; (8000774 <main+0x2d0>)
 80004ac:	2209      	movs	r2, #9
 80004ae:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 30;
 80004b0:	4bb0      	ldr	r3, [pc, #704]	; (8000774 <main+0x2d0>)
 80004b2:	221e      	movs	r2, #30
 80004b4:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 80004b6:	4baf      	ldr	r3, [pc, #700]	; (8000774 <main+0x2d0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	709a      	strb	r2, [r3, #2]

	sDate.Date = 19;
 80004bc:	4bae      	ldr	r3, [pc, #696]	; (8000778 <main+0x2d4>)
 80004be:	2213      	movs	r2, #19
 80004c0:	709a      	strb	r2, [r3, #2]
	sDate.Month = 3;
 80004c2:	4bad      	ldr	r3, [pc, #692]	; (8000778 <main+0x2d4>)
 80004c4:	2203      	movs	r2, #3
 80004c6:	705a      	strb	r2, [r3, #1]
	sDate.Year = 23;
 80004c8:	4bab      	ldr	r3, [pc, #684]	; (8000778 <main+0x2d4>)
 80004ca:	2217      	movs	r2, #23
 80004cc:	70da      	strb	r2, [r3, #3]


	uint8_t mode = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
	uint8_t sb;
	uint8_t CurrYear = 20;
 80004d2:	2314      	movs	r3, #20
 80004d4:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fe53 	bl	8001180 <HAL_Init>

  /* USER CODE BEGIN Init */
	Lcd_Init();
 80004da:	f7ff fe3f 	bl	800015c <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 fc3f 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fce1 	bl	8000ea8 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e6:	f000 fc95 	bl	8000e14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004ea:	2200      	movs	r2, #0
 80004ec:	49a1      	ldr	r1, [pc, #644]	; (8000774 <main+0x2d0>)
 80004ee:	48a3      	ldr	r0, [pc, #652]	; (800077c <main+0x2d8>)
 80004f0:	f001 ff7c 	bl	80023ec <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004f4:	2200      	movs	r2, #0
 80004f6:	49a0      	ldr	r1, [pc, #640]	; (8000778 <main+0x2d4>)
 80004f8:	48a0      	ldr	r0, [pc, #640]	; (800077c <main+0x2d8>)
 80004fa:	f002 f8e7 	bl	80026cc <HAL_RTC_SetDate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t MODE = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	70fb      	strb	r3, [r7, #3]
	uint8_t UP = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	70bb      	strb	r3, [r7, #2]
	uint8_t DOWN = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	707b      	strb	r3, [r7, #1]
	uint8_t OK = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	703b      	strb	r3, [r7, #0]
  while (1)
  {
		MODE = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	489b      	ldr	r0, [pc, #620]	; (8000780 <main+0x2dc>)
 8000512:	f001 f923 	bl	800175c <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	70fb      	strb	r3, [r7, #3]
		UP = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	4898      	ldr	r0, [pc, #608]	; (8000780 <main+0x2dc>)
 800051e:	f001 f91d 	bl	800175c <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	70bb      	strb	r3, [r7, #2]
		DOWN = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000526:	2120      	movs	r1, #32
 8000528:	4895      	ldr	r0, [pc, #596]	; (8000780 <main+0x2dc>)
 800052a:	f001 f917 	bl	800175c <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	707b      	strb	r3, [r7, #1]
		OK = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000532:	2110      	movs	r1, #16
 8000534:	4892      	ldr	r0, [pc, #584]	; (8000780 <main+0x2dc>)
 8000536:	f001 f911 	bl	800175c <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	703b      	strb	r3, [r7, #0]
		//kiem tra trang thai chan MODE

		if (MODE == 1 && sb==0){ //chon che do
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10f      	bne.n	8000564 <main+0xc0>
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <main+0xc0>
			if (mode == 9){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b09      	cmp	r3, #9
 800054e:	d102      	bne.n	8000556 <main+0xb2>
				mode = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	e002      	b.n	800055c <main+0xb8>
			}
			else {
				mode++;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	3301      	adds	r3, #1
 800055a:	71fb      	strb	r3, [r7, #7]
			}
			sb = 1; //bao co phim nhan
 800055c:	2301      	movs	r3, #1
 800055e:	71bb      	strb	r3, [r7, #6]
			Lcd_clear_display();
 8000560:	f7ff fe47 	bl	80001f2 <Lcd_clear_display>
	}
		//che do hien thi thong tin de tai
		if(mode == 0){
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d117      	bne.n	800059a <main+0xf6>

			Lcd_gotoxy(0,0);
 800056a:	2100      	movs	r1, #0
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff fe47 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("HE THONG NHUNG");
 8000572:	4884      	ldr	r0, [pc, #528]	; (8000784 <main+0x2e0>)
 8000574:	f7ff fe20 	bl	80001b8 <Lcd_write_string>
			Lcd_gotoxy(4,1);
 8000578:	2101      	movs	r1, #1
 800057a:	2004      	movs	r0, #4
 800057c:	f7ff fe40 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("LE THANH NAM");
 8000580:	4881      	ldr	r0, [pc, #516]	; (8000788 <main+0x2e4>)
 8000582:	f7ff fe19 	bl	80001b8 <Lcd_write_string>
			HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f000 fe5b 	bl	8001244 <HAL_Delay>
			sb = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	71bb      	strb	r3, [r7, #6]
			Lcd_clear_display();
 8000592:	f7ff fe2e 	bl	80001f2 <Lcd_clear_display>
			mode = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	71fb      	strb	r3, [r7, #7]
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(mode==1){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 809c 	bne.w	80006da <main+0x236>
			if(alarm_en == 1) Lcd_write_string("*");
 80005a2:	4b7a      	ldr	r3, [pc, #488]	; (800078c <main+0x2e8>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d102      	bne.n	80005b0 <main+0x10c>
 80005aa:	4879      	ldr	r0, [pc, #484]	; (8000790 <main+0x2ec>)
 80005ac:	f7ff fe04 	bl	80001b8 <Lcd_write_string>
			Lcd_gotoxy(4,0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2004      	movs	r0, #4
 80005b4:	f7ff fe24 	bl	8000200 <Lcd_gotoxy>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005b8:	2200      	movs	r2, #0
 80005ba:	496e      	ldr	r1, [pc, #440]	; (8000774 <main+0x2d0>)
 80005bc:	486f      	ldr	r0, [pc, #444]	; (800077c <main+0x2d8>)
 80005be:	f001 ffad 	bl	800251c <HAL_RTC_GetTime>
			Lcd_write_int(sTime.Hours);
 80005c2:	4b6c      	ldr	r3, [pc, #432]	; (8000774 <main+0x2d0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fde0 	bl	800018c <Lcd_write_int>
			Lcd_write_string(":");
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <main+0x2f0>)
 80005ce:	f7ff fdf3 	bl	80001b8 <Lcd_write_string>
			Lcd_write_int(sTime.Minutes);
 80005d2:	4b68      	ldr	r3, [pc, #416]	; (8000774 <main+0x2d0>)
 80005d4:	785b      	ldrb	r3, [r3, #1]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdd8 	bl	800018c <Lcd_write_int>
			Lcd_write_string(":");
 80005dc:	486d      	ldr	r0, [pc, #436]	; (8000794 <main+0x2f0>)
 80005de:	f7ff fdeb 	bl	80001b8 <Lcd_write_string>
			Lcd_write_int(sTime.Seconds);
 80005e2:	4b64      	ldr	r3, [pc, #400]	; (8000774 <main+0x2d0>)
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdd0 	bl	800018c <Lcd_write_int>
			Lcd_write_string(" ");
 80005ec:	486a      	ldr	r0, [pc, #424]	; (8000798 <main+0x2f4>)
 80005ee:	f7ff fde3 	bl	80001b8 <Lcd_write_string>

			Lcd_gotoxy(0,1);
 80005f2:	2101      	movs	r1, #1
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fe03 	bl	8000200 <Lcd_gotoxy>
			switch(sDate.WeekDay){
 80005fa:	4b5f      	ldr	r3, [pc, #380]	; (8000778 <main+0x2d4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d82c      	bhi.n	800065c <main+0x1b8>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <main+0x164>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000655 	.word	0x08000655
 800060c:	08000625 	.word	0x08000625
 8000610:	0800062d 	.word	0x0800062d
 8000614:	08000635 	.word	0x08000635
 8000618:	0800063d 	.word	0x0800063d
 800061c:	08000645 	.word	0x08000645
 8000620:	0800064d 	.word	0x0800064d
				case 1: Lcd_write_string("MON");
 8000624:	485d      	ldr	r0, [pc, #372]	; (800079c <main+0x2f8>)
 8000626:	f7ff fdc7 	bl	80001b8 <Lcd_write_string>
								break;
 800062a:	e017      	b.n	800065c <main+0x1b8>
				case 2: Lcd_write_string("TUE");
 800062c:	485c      	ldr	r0, [pc, #368]	; (80007a0 <main+0x2fc>)
 800062e:	f7ff fdc3 	bl	80001b8 <Lcd_write_string>
								break;
 8000632:	e013      	b.n	800065c <main+0x1b8>
				case 3: Lcd_write_string("WEN");
 8000634:	485b      	ldr	r0, [pc, #364]	; (80007a4 <main+0x300>)
 8000636:	f7ff fdbf 	bl	80001b8 <Lcd_write_string>
								break;
 800063a:	e00f      	b.n	800065c <main+0x1b8>
				case 4: Lcd_write_string("THU");
 800063c:	485a      	ldr	r0, [pc, #360]	; (80007a8 <main+0x304>)
 800063e:	f7ff fdbb 	bl	80001b8 <Lcd_write_string>
								break;
 8000642:	e00b      	b.n	800065c <main+0x1b8>
				case 5: Lcd_write_string("FRI");
 8000644:	4859      	ldr	r0, [pc, #356]	; (80007ac <main+0x308>)
 8000646:	f7ff fdb7 	bl	80001b8 <Lcd_write_string>
								break;
 800064a:	e007      	b.n	800065c <main+0x1b8>
				case 6: Lcd_write_string("SAT");
 800064c:	4858      	ldr	r0, [pc, #352]	; (80007b0 <main+0x30c>)
 800064e:	f7ff fdb3 	bl	80001b8 <Lcd_write_string>
								break;
 8000652:	e003      	b.n	800065c <main+0x1b8>
				case 0: Lcd_write_string("SUN");
 8000654:	4857      	ldr	r0, [pc, #348]	; (80007b4 <main+0x310>)
 8000656:	f7ff fdaf 	bl	80001b8 <Lcd_write_string>
								break;
 800065a:	bf00      	nop
				}

			Lcd_gotoxy(6,1);
 800065c:	2101      	movs	r1, #1
 800065e:	2006      	movs	r0, #6
 8000660:	f7ff fdce 	bl	8000200 <Lcd_gotoxy>
			if(sDate.Date >9) Lcd_write_int(sDate.Date);
 8000664:	4b44      	ldr	r3, [pc, #272]	; (8000778 <main+0x2d4>)
 8000666:	789b      	ldrb	r3, [r3, #2]
 8000668:	2b09      	cmp	r3, #9
 800066a:	d905      	bls.n	8000678 <main+0x1d4>
 800066c:	4b42      	ldr	r3, [pc, #264]	; (8000778 <main+0x2d4>)
 800066e:	789b      	ldrb	r3, [r3, #2]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fd8b 	bl	800018c <Lcd_write_int>
 8000676:	e007      	b.n	8000688 <main+0x1e4>
			else{
				Lcd_write_int(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff fd87 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sDate.Date);
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <main+0x2d4>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fd82 	bl	800018c <Lcd_write_int>
			}
			Lcd_write_string("-");
 8000688:	484b      	ldr	r0, [pc, #300]	; (80007b8 <main+0x314>)
 800068a:	f7ff fd95 	bl	80001b8 <Lcd_write_string>
			if(sDate.Month >9) Lcd_write_int(sDate.Month);
 800068e:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <main+0x2d4>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	2b09      	cmp	r3, #9
 8000694:	d905      	bls.n	80006a2 <main+0x1fe>
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <main+0x2d4>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd76 	bl	800018c <Lcd_write_int>
 80006a0:	e007      	b.n	80006b2 <main+0x20e>
			else{
				Lcd_write_int(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fd72 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sDate.Month);
 80006a8:	4b33      	ldr	r3, [pc, #204]	; (8000778 <main+0x2d4>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd6d 	bl	800018c <Lcd_write_int>
			}
			Lcd_write_string("-");
 80006b2:	4841      	ldr	r0, [pc, #260]	; (80007b8 <main+0x314>)
 80006b4:	f7ff fd80 	bl	80001b8 <Lcd_write_string>
			Lcd_write_int(CurrYear);
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd66 	bl	800018c <Lcd_write_int>
			Lcd_write_int(sDate.Year);
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <main+0x2d4>)
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd61 	bl	800018c <Lcd_write_int>
			Lcd_write_string(" ");
 80006ca:	4833      	ldr	r0, [pc, #204]	; (8000798 <main+0x2f4>)
 80006cc:	f7ff fd74 	bl	80001b8 <Lcd_write_string>

			HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f000 fdb7 	bl	8001244 <HAL_Delay>
			sb = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71bb      	strb	r3, [r7, #6]
		}

		//che do chinh gio trong hen gio
		if(mode == 2){
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d17b      	bne.n	80007d8 <main+0x334>
			Lcd_gotoxy(0,0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fd8c 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Alarm Hour: ");
 80006e8:	4834      	ldr	r0, [pc, #208]	; (80007bc <main+0x318>)
 80006ea:	f7ff fd65 	bl	80001b8 <Lcd_write_string>
			if(alarm_hour < 10){
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <main+0x31c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b09      	cmp	r3, #9
 80006f4:	d808      	bhi.n	8000708 <main+0x264>
				Lcd_write_int(0);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fd48 	bl	800018c <Lcd_write_int>
				Lcd_write_int(alarm_hour);
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <main+0x31c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd43 	bl	800018c <Lcd_write_int>
 8000706:	e004      	b.n	8000712 <main+0x26e>
			}
			else Lcd_write_int(alarm_hour);
 8000708:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <main+0x31c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd3d 	bl	800018c <Lcd_write_int>
			HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f000 fd96 	bl	8001244 <HAL_Delay>
			if (UP == 1 && sb == 0){
 8000718:	78bb      	ldrb	r3, [r7, #2]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d112      	bne.n	8000744 <main+0x2a0>
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10f      	bne.n	8000744 <main+0x2a0>
				if (alarm_hour == 23) alarm_hour = 0;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <main+0x31c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b17      	cmp	r3, #23
 800072a:	d103      	bne.n	8000734 <main+0x290>
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x31c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e005      	b.n	8000740 <main+0x29c>
				else alarm_hour++;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0x31c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0x31c>)
 800073e:	701a      	strb	r2, [r3, #0]
				sb = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	71bb      	strb	r3, [r7, #6]
			}
			if (DOWN == 1 && sb == 0){
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d13c      	bne.n	80007c4 <main+0x320>
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d139      	bne.n	80007c4 <main+0x320>
				if (alarm_hour == 0) alarm_hour = 23;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0x31c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <main+0x2bc>
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <main+0x31c>)
 800075a:	2217      	movs	r2, #23
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <main+0x2c8>
				else alarm_hour--;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <main+0x31c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0x31c>)
 800076a:	701a      	strb	r2, [r3, #0]
				sb = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
 8000770:	e032      	b.n	80007d8 <main+0x334>
 8000772:	bf00      	nop
 8000774:	200000a8 	.word	0x200000a8
 8000778:	200000ac 	.word	0x200000ac
 800077c:	20000094 	.word	0x20000094
 8000780:	40010800 	.word	0x40010800
 8000784:	080036fc 	.word	0x080036fc
 8000788:	0800370c 	.word	0x0800370c
 800078c:	200000b0 	.word	0x200000b0
 8000790:	0800371c 	.word	0x0800371c
 8000794:	08003720 	.word	0x08003720
 8000798:	08003724 	.word	0x08003724
 800079c:	08003728 	.word	0x08003728
 80007a0:	0800372c 	.word	0x0800372c
 80007a4:	08003730 	.word	0x08003730
 80007a8:	08003734 	.word	0x08003734
 80007ac:	08003738 	.word	0x08003738
 80007b0:	0800373c 	.word	0x0800373c
 80007b4:	08003740 	.word	0x08003740
 80007b8:	08003744 	.word	0x08003744
 80007bc:	08003748 	.word	0x08003748
 80007c0:	20000018 	.word	0x20000018
			}

			else if(OK == 1 && sb == 0){
 80007c4:	783b      	ldrb	r3, [r7, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d106      	bne.n	80007d8 <main+0x334>
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <main+0x334>
				Lcd_clear_display();
 80007d0:	f7ff fd0f 	bl	80001f2 <Lcd_clear_display>
				sb = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	71bb      	strb	r3, [r7, #6]
			}
		}

		//che do chinh phut trong hen gio
		if(mode == 3){
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d15b      	bne.n	8000896 <main+0x3f2>
			Lcd_gotoxy(0,0);
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fd0d 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Alarm Minute: ");
 80007e6:	489b      	ldr	r0, [pc, #620]	; (8000a54 <main+0x5b0>)
 80007e8:	f7ff fce6 	bl	80001b8 <Lcd_write_string>
			if(alarm_minute < 10){
 80007ec:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <main+0x5b4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b09      	cmp	r3, #9
 80007f2:	d808      	bhi.n	8000806 <main+0x362>
				Lcd_write_int(0);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fcc9 	bl	800018c <Lcd_write_int>
				Lcd_write_int(alarm_minute);
 80007fa:	4b97      	ldr	r3, [pc, #604]	; (8000a58 <main+0x5b4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fcc4 	bl	800018c <Lcd_write_int>
 8000804:	e004      	b.n	8000810 <main+0x36c>
			}
			else Lcd_write_int(alarm_minute);
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <main+0x5b4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fcbe 	bl	800018c <Lcd_write_int>
			HAL_Delay(200);
 8000810:	20c8      	movs	r0, #200	; 0xc8
 8000812:	f000 fd17 	bl	8001244 <HAL_Delay>
			if (UP == 1 && sb == 0){
 8000816:	78bb      	ldrb	r3, [r7, #2]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d112      	bne.n	8000842 <main+0x39e>
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10f      	bne.n	8000842 <main+0x39e>
				if (alarm_minute == 59) alarm_minute = 0;
 8000822:	4b8d      	ldr	r3, [pc, #564]	; (8000a58 <main+0x5b4>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b3b      	cmp	r3, #59	; 0x3b
 8000828:	d103      	bne.n	8000832 <main+0x38e>
 800082a:	4b8b      	ldr	r3, [pc, #556]	; (8000a58 <main+0x5b4>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e005      	b.n	800083e <main+0x39a>
				else alarm_minute++;
 8000832:	4b89      	ldr	r3, [pc, #548]	; (8000a58 <main+0x5b4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b87      	ldr	r3, [pc, #540]	; (8000a58 <main+0x5b4>)
 800083c:	701a      	strb	r2, [r3, #0]
				sb = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	71bb      	strb	r3, [r7, #6]
			}
			if (DOWN == 1 && sb == 0){
 8000842:	787b      	ldrb	r3, [r7, #1]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d112      	bne.n	800086e <main+0x3ca>
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10f      	bne.n	800086e <main+0x3ca>
				if (alarm_minute == 0) alarm_minute = 59;
 800084e:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <main+0x5b4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <main+0x3ba>
 8000856:	4b80      	ldr	r3, [pc, #512]	; (8000a58 <main+0x5b4>)
 8000858:	223b      	movs	r2, #59	; 0x3b
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e005      	b.n	800086a <main+0x3c6>
				else alarm_minute--;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <main+0x5b4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <main+0x5b4>)
 8000868:	701a      	strb	r2, [r3, #0]
			sb = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	71bb      	strb	r3, [r7, #6]
			}

			if(OK == 1){
 800086e:	783b      	ldrb	r3, [r7, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d110      	bne.n	8000896 <main+0x3f2>
				if(alarm_en == 1) alarm_en = 0;
 8000874:	4b79      	ldr	r3, [pc, #484]	; (8000a5c <main+0x5b8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d103      	bne.n	8000884 <main+0x3e0>
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <main+0x5b8>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e002      	b.n	800088a <main+0x3e6>
				else alarm_en = 1;
 8000884:	4b75      	ldr	r3, [pc, #468]	; (8000a5c <main+0x5b8>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
				Lcd_clear_display();
 800088a:	f7ff fcb2 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
				sb = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	71bb      	strb	r3, [r7, #6]
			}

		}

		//kiem tra gio bao thuc
		if(alarm_en == 1){
 8000896:	4b71      	ldr	r3, [pc, #452]	; (8000a5c <main+0x5b8>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d149      	bne.n	8000932 <main+0x48e>
			if(alarm_hour == sTime.Hours && alarm_minute == sTime.Minutes){
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <main+0x5bc>)
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	4b70      	ldr	r3, [pc, #448]	; (8000a64 <main+0x5c0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d143      	bne.n	8000932 <main+0x48e>
 80008aa:	4b6d      	ldr	r3, [pc, #436]	; (8000a60 <main+0x5bc>)
 80008ac:	785a      	ldrb	r2, [r3, #1]
 80008ae:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <main+0x5b4>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d13d      	bne.n	8000932 <main+0x48e>
			Lcd_clear_display();
 80008b6:	f7ff fc9c 	bl	80001f2 <Lcd_clear_display>
			Lcd_gotoxy(3,0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2003      	movs	r0, #3
 80008be:	f7ff fc9f 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("WARNING!!!");
 80008c2:	4869      	ldr	r0, [pc, #420]	; (8000a68 <main+0x5c4>)
 80008c4:	f7ff fc78 	bl	80001b8 <Lcd_write_string>
			for(uint8_t i = 30; i > 0; i--){
 80008c8:	231e      	movs	r3, #30
 80008ca:	713b      	strb	r3, [r7, #4]
 80008cc:	e02e      	b.n	800092c <main+0x488>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	4866      	ldr	r0, [pc, #408]	; (8000a6c <main+0x5c8>)
 80008d4:	f000 ff71 	bl	80017ba <HAL_GPIO_TogglePin>
				HAL_Delay(40);
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fcb3 	bl	8001244 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4862      	ldr	r0, [pc, #392]	; (8000a6c <main+0x5c8>)
 80008e4:	f000 ff69 	bl	80017ba <HAL_GPIO_TogglePin>
				HAL_Delay(20);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f000 fcab 	bl	8001244 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80008ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f2:	485e      	ldr	r0, [pc, #376]	; (8000a6c <main+0x5c8>)
 80008f4:	f000 ff61 	bl	80017ba <HAL_GPIO_TogglePin>
				HAL_Delay(40);
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f000 fca3 	bl	8001244 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	485a      	ldr	r0, [pc, #360]	; (8000a6c <main+0x5c8>)
 8000904:	f000 ff59 	bl	80017ba <HAL_GPIO_TogglePin>
				HAL_Delay(300);
 8000908:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800090c:	f000 fc9a 	bl	8001244 <HAL_Delay>
				if(OK == 1){
 8000910:	783b      	ldrb	r3, [r7, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d107      	bne.n	8000926 <main+0x482>
					alarm_en = 0;
 8000916:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <main+0x5b8>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
					Lcd_clear_display();
 800091c:	f7ff fc69 	bl	80001f2 <Lcd_clear_display>
					sb = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	71bb      	strb	r3, [r7, #6]
					break;
 8000924:	e005      	b.n	8000932 <main+0x48e>
			for(uint8_t i = 30; i > 0; i--){
 8000926:	793b      	ldrb	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
 800092a:	713b      	strb	r3, [r7, #4]
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1cd      	bne.n	80008ce <main+0x42a>
				}
			}
		}
	}
		if(mode == 4){
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d15d      	bne.n	80009f4 <main+0x550>
			Lcd_gotoxy(0,0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fc60 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Set Hour: ");
 8000940:	484b      	ldr	r0, [pc, #300]	; (8000a70 <main+0x5cc>)
 8000942:	f7ff fc39 	bl	80001b8 <Lcd_write_string>
			if(sTime.Hours < 10){
 8000946:	4b46      	ldr	r3, [pc, #280]	; (8000a60 <main+0x5bc>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b09      	cmp	r3, #9
 800094c:	d808      	bhi.n	8000960 <main+0x4bc>
				Lcd_write_int(0);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fc1c 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sTime.Hours);
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <main+0x5bc>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fc17 	bl	800018c <Lcd_write_int>
 800095e:	e004      	b.n	800096a <main+0x4c6>
			}
			else Lcd_write_int(sTime.Hours);
 8000960:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <main+0x5bc>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc11 	bl	800018c <Lcd_write_int>
			sb = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	71bb      	strb	r3, [r7, #6]
			HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f000 fc68 	bl	8001244 <HAL_Delay>


			if (UP == 1 && sb == 0){ //Phim UP duoc nhan
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d117      	bne.n	80009aa <main+0x506>
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d114      	bne.n	80009aa <main+0x506>
				if (sTime.Hours == 23) sTime.Hours = 0;
 8000980:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <main+0x5bc>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b17      	cmp	r3, #23
 8000986:	d103      	bne.n	8000990 <main+0x4ec>
 8000988:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <main+0x5bc>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e005      	b.n	800099c <main+0x4f8>
				else sTime.Hours++;
 8000990:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <main+0x5bc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <main+0x5bc>)
 800099a:	701a      	strb	r2, [r3, #0]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800099c:	2200      	movs	r2, #0
 800099e:	4930      	ldr	r1, [pc, #192]	; (8000a60 <main+0x5bc>)
 80009a0:	4834      	ldr	r0, [pc, #208]	; (8000a74 <main+0x5d0>)
 80009a2:	f001 fd23 	bl	80023ec <HAL_RTC_SetTime>
				sb = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	71bb      	strb	r3, [r7, #6]
			}

			if (DOWN == 1 && sb == 0){ //Phim DOWN duoc nhan
 80009aa:	787b      	ldrb	r3, [r7, #1]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d117      	bne.n	80009e0 <main+0x53c>
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d114      	bne.n	80009e0 <main+0x53c>
				if (sTime.Hours == 0) sTime.Hours = 23;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <main+0x5bc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <main+0x522>
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0x5bc>)
 80009c0:	2217      	movs	r2, #23
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e005      	b.n	80009d2 <main+0x52e>
				else sTime.Hours--;
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <main+0x5bc>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <main+0x5bc>)
 80009d0:	701a      	strb	r2, [r3, #0]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009d2:	2200      	movs	r2, #0
 80009d4:	4922      	ldr	r1, [pc, #136]	; (8000a60 <main+0x5bc>)
 80009d6:	4827      	ldr	r0, [pc, #156]	; (8000a74 <main+0x5d0>)
 80009d8:	f001 fd08 	bl	80023ec <HAL_RTC_SetTime>
				sb = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	71bb      	strb	r3, [r7, #6]
			}
			if(OK == 1 && sb == 0){
 80009e0:	783b      	ldrb	r3, [r7, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <main+0x550>
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <main+0x550>
				Lcd_clear_display();
 80009ec:	f7ff fc01 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
			}
		}
		//che do chinh phut
		if(mode == 5){
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b05      	cmp	r3, #5
 80009f8:	d172      	bne.n	8000ae0 <main+0x63c>
			Lcd_gotoxy(0,0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fbff 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Set Minutes: ");
 8000a02:	481d      	ldr	r0, [pc, #116]	; (8000a78 <main+0x5d4>)
 8000a04:	f7ff fbd8 	bl	80001b8 <Lcd_write_string>
			if(sTime.Minutes < 10){
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <main+0x5bc>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d808      	bhi.n	8000a22 <main+0x57e>
				Lcd_write_int(0);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fbbb 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sTime.Minutes);
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <main+0x5bc>)
 8000a18:	785b      	ldrb	r3, [r3, #1]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fbb6 	bl	800018c <Lcd_write_int>
 8000a20:	e004      	b.n	8000a2c <main+0x588>
			}
			else Lcd_write_int(sTime.Minutes);
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <main+0x5bc>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbb0 	bl	800018c <Lcd_write_int>
			sb = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71bb      	strb	r3, [r7, #6]
			HAL_Delay(200);
 8000a30:	20c8      	movs	r0, #200	; 0xc8
 8000a32:	f000 fc07 	bl	8001244 <HAL_Delay>
			//status_button(MODE, UP, DOWN, OK, sb);

			if (UP == 1 && sb == 0){ //Phim UP duoc nhan
 8000a36:	78bb      	ldrb	r3, [r7, #2]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d12c      	bne.n	8000a96 <main+0x5f2>
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d129      	bne.n	8000a96 <main+0x5f2>
				if (sTime.Minutes == 59) sTime.Minutes = 0;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <main+0x5bc>)
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	2b3b      	cmp	r3, #59	; 0x3b
 8000a48:	d118      	bne.n	8000a7c <main+0x5d8>
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <main+0x5bc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
 8000a50:	e01a      	b.n	8000a88 <main+0x5e4>
 8000a52:	bf00      	nop
 8000a54:	08003758 	.word	0x08003758
 8000a58:	200000b1 	.word	0x200000b1
 8000a5c:	200000b0 	.word	0x200000b0
 8000a60:	200000a8 	.word	0x200000a8
 8000a64:	20000018 	.word	0x20000018
 8000a68:	08003768 	.word	0x08003768
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	08003774 	.word	0x08003774
 8000a74:	20000094 	.word	0x20000094
 8000a78:	08003780 	.word	0x08003780
				else sTime.Minutes++;
 8000a7c:	4b9c      	ldr	r3, [pc, #624]	; (8000cf0 <main+0x84c>)
 8000a7e:	785b      	ldrb	r3, [r3, #1]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b9a      	ldr	r3, [pc, #616]	; (8000cf0 <main+0x84c>)
 8000a86:	705a      	strb	r2, [r3, #1]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4999      	ldr	r1, [pc, #612]	; (8000cf0 <main+0x84c>)
 8000a8c:	4899      	ldr	r0, [pc, #612]	; (8000cf4 <main+0x850>)
 8000a8e:	f001 fcad 	bl	80023ec <HAL_RTC_SetTime>
				sb = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	71bb      	strb	r3, [r7, #6]
			}

			if (DOWN == 1 && sb == 0){ //Phim DOWN duoc nhan
 8000a96:	787b      	ldrb	r3, [r7, #1]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d117      	bne.n	8000acc <main+0x628>
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d114      	bne.n	8000acc <main+0x628>
				if (sTime.Minutes == 0) sTime.Minutes = 59;
 8000aa2:	4b93      	ldr	r3, [pc, #588]	; (8000cf0 <main+0x84c>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <main+0x60e>
 8000aaa:	4b91      	ldr	r3, [pc, #580]	; (8000cf0 <main+0x84c>)
 8000aac:	223b      	movs	r2, #59	; 0x3b
 8000aae:	705a      	strb	r2, [r3, #1]
 8000ab0:	e005      	b.n	8000abe <main+0x61a>
				else sTime.Minutes--;
 8000ab2:	4b8f      	ldr	r3, [pc, #572]	; (8000cf0 <main+0x84c>)
 8000ab4:	785b      	ldrb	r3, [r3, #1]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b8d      	ldr	r3, [pc, #564]	; (8000cf0 <main+0x84c>)
 8000abc:	705a      	strb	r2, [r3, #1]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	498b      	ldr	r1, [pc, #556]	; (8000cf0 <main+0x84c>)
 8000ac2:	488c      	ldr	r0, [pc, #560]	; (8000cf4 <main+0x850>)
 8000ac4:	f001 fc92 	bl	80023ec <HAL_RTC_SetTime>
				sb = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71bb      	strb	r3, [r7, #6]
			}
			if(OK == 1 && sb == 0){
 8000acc:	783b      	ldrb	r3, [r7, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d106      	bne.n	8000ae0 <main+0x63c>
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d103      	bne.n	8000ae0 <main+0x63c>
				Lcd_clear_display();
 8000ad8:	f7ff fb8b 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	71fb      	strb	r3, [r7, #7]
			}
		}
		//che do chinh ngay
		if(mode == 6){
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d160      	bne.n	8000ba8 <main+0x704>
			Lcd_gotoxy(0,0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fb89 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Set Date: ");
 8000aee:	4882      	ldr	r0, [pc, #520]	; (8000cf8 <main+0x854>)
 8000af0:	f7ff fb62 	bl	80001b8 <Lcd_write_string>
			if(sDate.Date < 10){
 8000af4:	4b81      	ldr	r3, [pc, #516]	; (8000cfc <main+0x858>)
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d808      	bhi.n	8000b0e <main+0x66a>
				Lcd_write_int(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fb45 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sDate.Date);
 8000b02:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <main+0x858>)
 8000b04:	789b      	ldrb	r3, [r3, #2]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb40 	bl	800018c <Lcd_write_int>
 8000b0c:	e004      	b.n	8000b18 <main+0x674>
			}
			else Lcd_write_int(sDate.Date);
 8000b0e:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <main+0x858>)
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb3a 	bl	800018c <Lcd_write_int>
			Lcd_write_string("   ");
 8000b18:	4879      	ldr	r0, [pc, #484]	; (8000d00 <main+0x85c>)
 8000b1a:	f7ff fb4d 	bl	80001b8 <Lcd_write_string>
			sb = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
			HAL_Delay(200);
 8000b22:	20c8      	movs	r0, #200	; 0xc8
 8000b24:	f000 fb8e 	bl	8001244 <HAL_Delay>
			//status_button(MODE, UP, DOWN, OK, sb);

			if (UP == 1 && sb == 0){ //Phim UP duoc nhan
 8000b28:	78bb      	ldrb	r3, [r7, #2]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d117      	bne.n	8000b5e <main+0x6ba>
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d114      	bne.n	8000b5e <main+0x6ba>
				if (sDate.Date == 32) sDate.Date = 1;
 8000b34:	4b71      	ldr	r3, [pc, #452]	; (8000cfc <main+0x858>)
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d103      	bne.n	8000b44 <main+0x6a0>
 8000b3c:	4b6f      	ldr	r3, [pc, #444]	; (8000cfc <main+0x858>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	709a      	strb	r2, [r3, #2]
 8000b42:	e005      	b.n	8000b50 <main+0x6ac>
				else sDate.Date++;
 8000b44:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <main+0x858>)
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b6b      	ldr	r3, [pc, #428]	; (8000cfc <main+0x858>)
 8000b4e:	709a      	strb	r2, [r3, #2]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b50:	2200      	movs	r2, #0
 8000b52:	496a      	ldr	r1, [pc, #424]	; (8000cfc <main+0x858>)
 8000b54:	4867      	ldr	r0, [pc, #412]	; (8000cf4 <main+0x850>)
 8000b56:	f001 fdb9 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71bb      	strb	r3, [r7, #6]
			}

			if (DOWN == 1 && sb == 0){ //Phim DOWN duoc nhan
 8000b5e:	787b      	ldrb	r3, [r7, #1]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d117      	bne.n	8000b94 <main+0x6f0>
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d114      	bne.n	8000b94 <main+0x6f0>
				if (sDate.Date == 0) sDate.Date = 31;
 8000b6a:	4b64      	ldr	r3, [pc, #400]	; (8000cfc <main+0x858>)
 8000b6c:	789b      	ldrb	r3, [r3, #2]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <main+0x6d6>
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <main+0x858>)
 8000b74:	221f      	movs	r2, #31
 8000b76:	709a      	strb	r2, [r3, #2]
 8000b78:	e005      	b.n	8000b86 <main+0x6e2>
				else sDate.Date--;
 8000b7a:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <main+0x858>)
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <main+0x858>)
 8000b84:	709a      	strb	r2, [r3, #2]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b86:	2200      	movs	r2, #0
 8000b88:	495c      	ldr	r1, [pc, #368]	; (8000cfc <main+0x858>)
 8000b8a:	485a      	ldr	r0, [pc, #360]	; (8000cf4 <main+0x850>)
 8000b8c:	f001 fd9e 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	71bb      	strb	r3, [r7, #6]
			}
			if(OK == 1 && sb == 0){
 8000b94:	783b      	ldrb	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <main+0x704>
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d103      	bne.n	8000ba8 <main+0x704>
				Lcd_clear_display();
 8000ba0:	f7ff fb27 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
			}
		}

		//che do chinh thang
		if(mode == 7){
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	d15d      	bne.n	8000c6a <main+0x7c6>
			Lcd_gotoxy(0,0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fb25 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Set Month: ");
 8000bb6:	4853      	ldr	r0, [pc, #332]	; (8000d04 <main+0x860>)
 8000bb8:	f7ff fafe 	bl	80001b8 <Lcd_write_string>
			if(sDate.Month < 10){
 8000bbc:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <main+0x858>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	d808      	bhi.n	8000bd6 <main+0x732>
				Lcd_write_int(0);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fae1 	bl	800018c <Lcd_write_int>
				Lcd_write_int(sDate.Month);
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <main+0x858>)
 8000bcc:	785b      	ldrb	r3, [r3, #1]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fadc 	bl	800018c <Lcd_write_int>
 8000bd4:	e004      	b.n	8000be0 <main+0x73c>
			}
			else Lcd_write_int(sDate.Month);
 8000bd6:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <main+0x858>)
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fad6 	bl	800018c <Lcd_write_int>
			sb = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71bb      	strb	r3, [r7, #6]
			HAL_Delay(200);
 8000be4:	20c8      	movs	r0, #200	; 0xc8
 8000be6:	f000 fb2d 	bl	8001244 <HAL_Delay>
			//status_button(MODE, UP, DOWN, OK, sb);

			if (UP == 1 && sb == 0){ //Phim UP duoc nhan
 8000bea:	78bb      	ldrb	r3, [r7, #2]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d117      	bne.n	8000c20 <main+0x77c>
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d114      	bne.n	8000c20 <main+0x77c>
				if (sDate.Month == 12) sDate.Month = 1;
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <main+0x858>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b0c      	cmp	r3, #12
 8000bfc:	d103      	bne.n	8000c06 <main+0x762>
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <main+0x858>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	705a      	strb	r2, [r3, #1]
 8000c04:	e005      	b.n	8000c12 <main+0x76e>
				else sDate.Month++;
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <main+0x858>)
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <main+0x858>)
 8000c10:	705a      	strb	r2, [r3, #1]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c12:	2200      	movs	r2, #0
 8000c14:	4939      	ldr	r1, [pc, #228]	; (8000cfc <main+0x858>)
 8000c16:	4837      	ldr	r0, [pc, #220]	; (8000cf4 <main+0x850>)
 8000c18:	f001 fd58 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71bb      	strb	r3, [r7, #6]
			}

			if (DOWN == 1 && sb == 0){ //Phim DOWN duoc nhan
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d117      	bne.n	8000c56 <main+0x7b2>
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d114      	bne.n	8000c56 <main+0x7b2>
				if (sDate.Month == 1) sDate.Month = 12;
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <main+0x858>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d103      	bne.n	8000c3c <main+0x798>
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <main+0x858>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	705a      	strb	r2, [r3, #1]
 8000c3a:	e005      	b.n	8000c48 <main+0x7a4>
				else sDate.Month--;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <main+0x858>)
 8000c3e:	785b      	ldrb	r3, [r3, #1]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <main+0x858>)
 8000c46:	705a      	strb	r2, [r3, #1]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	492c      	ldr	r1, [pc, #176]	; (8000cfc <main+0x858>)
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <main+0x850>)
 8000c4e:	f001 fd3d 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	71bb      	strb	r3, [r7, #6]
			}
			if(OK == 1 && sb == 0){
 8000c56:	783b      	ldrb	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d106      	bne.n	8000c6a <main+0x7c6>
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <main+0x7c6>
				Lcd_clear_display();
 8000c62:	f7ff fac6 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	71fb      	strb	r3, [r7, #7]
			}
		}

		//CHE DO CHINH NAM
		if(mode == 8){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d164      	bne.n	8000d3a <main+0x896>
			Lcd_gotoxy(0,0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fac4 	bl	8000200 <Lcd_gotoxy>
			Lcd_write_string("Set Year: ");
 8000c78:	4823      	ldr	r0, [pc, #140]	; (8000d08 <main+0x864>)
 8000c7a:	f7ff fa9d 	bl	80001b8 <Lcd_write_string>
			Lcd_write_int(sDate.Year);
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <main+0x858>)
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fa82 	bl	800018c <Lcd_write_int>
			sb = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71bb      	strb	r3, [r7, #6]
			HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f000 fad9 	bl	8001244 <HAL_Delay>
			//status_button(MODE, UP, DOWN, OK, sb);

			if (UP == 1 && sb == 0){ //Phim UP duoc nhan
 8000c92:	78bb      	ldrb	r3, [r7, #2]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d11a      	bne.n	8000cce <main+0x82a>
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d117      	bne.n	8000cce <main+0x82a>
				if (sDate.Year == 99){
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <main+0x858>)
 8000ca0:	78db      	ldrb	r3, [r3, #3]
 8000ca2:	2b63      	cmp	r3, #99	; 0x63
 8000ca4:	d106      	bne.n	8000cb4 <main+0x810>
					sDate.Year = 0;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <main+0x858>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	70da      	strb	r2, [r3, #3]
					CurrYear++;
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	717b      	strb	r3, [r7, #5]
 8000cb2:	e005      	b.n	8000cc0 <main+0x81c>
				}
				else sDate.Year++;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <main+0x858>)
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <main+0x858>)
 8000cbe:	70da      	strb	r2, [r3, #3]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <main+0x858>)
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <main+0x850>)
 8000cc6:	f001 fd01 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	71bb      	strb	r3, [r7, #6]
			}

			if (DOWN == 1 && sb == 0){ //Phim DOWN duoc nhan
 8000cce:	787b      	ldrb	r3, [r7, #1]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d128      	bne.n	8000d26 <main+0x882>
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d125      	bne.n	8000d26 <main+0x882>
				if (sDate.Year == 0){
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <main+0x858>)
 8000cdc:	78db      	ldrb	r3, [r3, #3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d114      	bne.n	8000d0c <main+0x868>
					sDate.Year = 99;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <main+0x858>)
 8000ce4:	2263      	movs	r2, #99	; 0x63
 8000ce6:	70da      	strb	r2, [r3, #3]
					CurrYear--;
 8000ce8:	797b      	ldrb	r3, [r7, #5]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	717b      	strb	r3, [r7, #5]
 8000cee:	e013      	b.n	8000d18 <main+0x874>
 8000cf0:	200000a8 	.word	0x200000a8
 8000cf4:	20000094 	.word	0x20000094
 8000cf8:	08003790 	.word	0x08003790
 8000cfc:	200000ac 	.word	0x200000ac
 8000d00:	0800379c 	.word	0x0800379c
 8000d04:	080037a0 	.word	0x080037a0
 8000d08:	080037ac 	.word	0x080037ac
				}
				else sDate.Year--;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <main+0x8b0>)
 8000d0e:	78db      	ldrb	r3, [r3, #3]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x8b0>)
 8000d16:	70da      	strb	r2, [r3, #3]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <main+0x8b0>)
 8000d1c:	480e      	ldr	r0, [pc, #56]	; (8000d58 <main+0x8b4>)
 8000d1e:	f001 fcd5 	bl	80026cc <HAL_RTC_SetDate>
				sb = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71bb      	strb	r3, [r7, #6]
			}
			if(OK == 1 && sb == 0){
 8000d26:	783b      	ldrb	r3, [r7, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d106      	bne.n	8000d3a <main+0x896>
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <main+0x896>
				Lcd_clear_display();
 8000d32:	f7ff fa5e 	bl	80001f2 <Lcd_clear_display>
				mode = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
			}
		}
		sb = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <main+0x8b8>)
 8000d44:	f000 fd39 	bl	80017ba <HAL_GPIO_TogglePin>
			  HAL_Delay(250);
 8000d48:	20fa      	movs	r0, #250	; 0xfa
 8000d4a:	f000 fa7b 	bl	8001244 <HAL_Delay>
		MODE = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000d4e:	f7ff bbde 	b.w	800050e <main+0x6a>
 8000d52:	bf00      	nop
 8000d54:	200000ac 	.word	0x200000ac
 8000d58:	20000094 	.word	0x20000094
 8000d5c:	40011000 	.word	0x40011000

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 f824 	bl	8002dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d90:	2309      	movs	r3, #9
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000dae:	2300      	movs	r3, #0
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fd24 	bl	8001804 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc2:	f000 f8f7 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 ff91 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dec:	f000 f8e2 	bl	8000fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 f8fd 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e08:	f000 f8d4 	bl	8000fb4 <Error_Handler>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3750      	adds	r7, #80	; 0x50
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	460a      	mov	r2, r1
 8000e20:	801a      	strh	r2, [r3, #0]
 8000e22:	460a      	mov	r2, r1
 8000e24:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <MX_RTC_Init+0x90>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e36:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e40:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e42:	f001 fa47 	bl	80022d4 <HAL_RTC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000e4c:	f000 f8b2 	bl	8000fb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000e50:	2309      	movs	r3, #9
 8000e52:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e64:	f001 fac2 	bl	80023ec <HAL_RTC_SetTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000e6e:	f000 f8a1 	bl	8000fb4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e72:	2301      	movs	r3, #1
 8000e74:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_OCTOBER;
 8000e76:	2310      	movs	r3, #16
 8000e78:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8000e7e:	2323      	movs	r3, #35	; 0x23
 8000e80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2201      	movs	r2, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_RTC_Init+0x8c>)
 8000e8a:	f001 fc1f 	bl	80026cc <HAL_RTC_SetDate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000e94:	f000 f88e 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	40002800 	.word	0x40002800

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a38      	ldr	r2, [pc, #224]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4827      	ldr	r0, [pc, #156]	; (8000fa8 <MX_GPIO_Init+0x100>)
 8000f0c:	f000 fc3d 	bl	800178a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 518f 	mov.w	r1, #4576	; 0x11e0
 8000f16:	4825      	ldr	r0, [pc, #148]	; (8000fac <MX_GPIO_Init+0x104>)
 8000f18:	f000 fc37 	bl	800178a <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0x108>)
 8000f24:	f000 fc31 	bl	800178a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <MX_GPIO_Init+0x100>)
 8000f42:	f000 fa87 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23f0      	movs	r3, #240	; 0xf0
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <MX_GPIO_Init+0x108>)
 8000f5a:	f000 fa7b 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000f5e:	f44f 538f 	mov.w	r3, #4576	; 0x11e0
 8000f62:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_GPIO_Init+0x104>)
 8000f78:	f000 fa6c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f7c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_GPIO_Init+0x108>)
 8000f96:	f000 fa5d 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_RTC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d110      	bne.n	8001058 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001036:	f000 fbd9 	bl	80017ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_RTC_MspInit+0x40>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_RTC_MspInit+0x40>)
 8001040:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_RTC_MspInit+0x40>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_RTC_MspInit+0x44>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	40021000 	.word	0x40021000
 8001068:	4242043c 	.word	0x4242043c

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b2:	f000 f8ab 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f001 fe6e 	bl	8002dcc <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20005000 	.word	0x20005000
 800111c:	00000400 	.word	0x00000400
 8001120:	200000b4 	.word	0x200000b4
 8001124:	20000208 	.word	0x20000208

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff fff8 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113a:	490c      	ldr	r1, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001150:	4c09      	ldr	r4, [pc, #36]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f001 fe3b 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff f99f 	bl	80004a4 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001170:	08003834 	.word	0x08003834
  ldr r2, =_sbss
 8001174:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001178:	20000204 	.word	0x20000204

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f92b 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff ff10 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f935 	bl	800143a <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e8:	f000 f90b 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000001c 	.word	0x2000001c
 8001204:	20000024 	.word	0x20000024
 8001208:	20000020 	.word	0x20000020

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000024 	.word	0x20000024
 800122c:	200000b8 	.word	0x200000b8

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200000b8 	.word	0x200000b8

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000024 	.word	0x20000024

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff49 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff5e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffb0 	bl	80013a8 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e169      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8158 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a9a      	ldr	r2, [pc, #616]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d05e      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 8001490:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d875      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 8001496:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d058      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 800149c:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d86f      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014a2:	4a96      	ldr	r2, [pc, #600]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d052      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014a8:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d869      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ae:	4a94      	ldr	r2, [pc, #592]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d04c      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014b4:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d863      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ba:	4a92      	ldr	r2, [pc, #584]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d046      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014c0:	4a90      	ldr	r2, [pc, #576]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d85d      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d82a      	bhi.n	8001520 <HAL_GPIO_Init+0xcc>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d859      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HAL_GPIO_Init+0x80>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	08001529 	.word	0x08001529
 80014dc:	0800153b 	.word	0x0800153b
 80014e0:	0800157d 	.word	0x0800157d
 80014e4:	08001583 	.word	0x08001583
 80014e8:	08001583 	.word	0x08001583
 80014ec:	08001583 	.word	0x08001583
 80014f0:	08001583 	.word	0x08001583
 80014f4:	08001583 	.word	0x08001583
 80014f8:	08001583 	.word	0x08001583
 80014fc:	08001583 	.word	0x08001583
 8001500:	08001583 	.word	0x08001583
 8001504:	08001583 	.word	0x08001583
 8001508:	08001583 	.word	0x08001583
 800150c:	08001583 	.word	0x08001583
 8001510:	08001583 	.word	0x08001583
 8001514:	08001583 	.word	0x08001583
 8001518:	08001531 	.word	0x08001531
 800151c:	08001545 	.word	0x08001545
 8001520:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_GPIO_Init+0x2b4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001526:	e02c      	b.n	8001582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e029      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e024      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e01f      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	330c      	adds	r3, #12
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e01a      	b.n	8001584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001556:	2304      	movs	r3, #4
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e013      	b.n	8001584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001564:	2308      	movs	r3, #8
 8001566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
          break;
 800156e:	e009      	b.n	8001584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	615a      	str	r2, [r3, #20]
          break;
 800157a:	e003      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x130>
          break;
 8001582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d801      	bhi.n	800158e <HAL_GPIO_Init+0x13a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_Init+0x13e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3304      	adds	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d802      	bhi.n	80015a0 <HAL_GPIO_Init+0x14c>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x152>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3b08      	subs	r3, #8
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	210f      	movs	r1, #15
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	6a39      	ldr	r1, [r7, #32]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80b1 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3e      	ldr	r2, [pc, #248]	; (800171c <HAL_GPIO_Init+0x2c8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001634:	2304      	movs	r3, #4
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001640:	2300      	movs	r3, #0
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001652:	492f      	ldr	r1, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	492c      	ldr	r1, [pc, #176]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4928      	ldr	r1, [pc, #160]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	491e      	ldr	r1, [pc, #120]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4918      	ldr	r1, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d021      	beq.n	8001728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e021      	b.n	8001736 <HAL_GPIO_Init+0x2e2>
 80016f2:	bf00      	nop
 80016f4:	10320000 	.word	0x10320000
 80016f8:	10310000 	.word	0x10310000
 80016fc:	10220000 	.word	0x10220000
 8001700:	10210000 	.word	0x10210000
 8001704:	10120000 	.word	0x10120000
 8001708:	10110000 	.word	0x10110000
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	40010800 	.word	0x40010800
 8001718:	40010c00 	.word	0x40010c00
 800171c:	40011000 	.word	0x40011000
 8001720:	40011400 	.word	0x40011400
 8001724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_GPIO_Init+0x304>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	43db      	mvns	r3, r3
 8001730:	4909      	ldr	r1, [pc, #36]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae8e 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	041a      	lsls	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	400b      	ands	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_PWR_EnableBkUpAccess+0x14>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	420e0020 	.word	0x420e0020

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e272      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e24c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fca6 	bl	8001230 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fca2 	bl	8001230 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e200      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fc92 	bl	8001230 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc8e 	bl	8001230 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1ec      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1c0      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fc47 	bl	8001230 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc43 	bl	8001230 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc26 	bl	8001230 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fc22 	bl	8001230 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e180      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fc06 	bl	8001230 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc02 	bl	8001230 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e160      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 faba 	bl	8001fc0 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fbec 	bl	8001230 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fbe8 	bl	8001230 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e146      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fba9 	bl	8001230 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fba5 	bl	8001230 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e103      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb59 	bl	8001230 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb55 	bl	8001230 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0b1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb43 	bl	8001230 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fb3f 	bl	8001230 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb13 	bl	8001230 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fb0f 	bl	8001230 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e06d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4921      	ldr	r1, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	491b      	ldr	r1, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fae3 	bl	8001230 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff fadf 	bl	8001230 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e035      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff facc 	bl	8001230 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fac8 	bl	8001230 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e026      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e019      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x500>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff fa1a 	bl	8001230 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff fa16 	bl	8001230 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f978 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	080037b8 	.word	0x080037b8
 8001ed4:	2000001c 	.word	0x2000001c
 8001ed8:	20000020 	.word	0x20000020

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e027      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	080037d0 	.word	0x080037d0
 8001f7c:	080037e0 	.word	0x080037e0
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	2000001c 	.word	0x2000001c

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0adb      	lsrs	r3, r3, #11
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080037c8 	.word	0x080037c8

08001fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <RCC_Delay+0x34>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <RCC_Delay+0x38>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fdc:	bf00      	nop
  }
  while (Delay --);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	60fa      	str	r2, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <RCC_Delay+0x1c>
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000001c 	.word	0x2000001c
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d07d      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d118      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205c:	f7ff f8e8 	bl	8001230 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	e008      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7ff f8e4 	bl	8001230 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e06d      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02e      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d027      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d014      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f8b3 	bl	8001230 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff f8af 	bl	8001230 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e036      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4917      	ldr	r1, [pc, #92]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	490b      	ldr	r1, [pc, #44]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420440 	.word	0x42420440

08002168 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b10      	cmp	r3, #16
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b10      	cmp	r3, #16
 800218e:	f200 808a 	bhi.w	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d045      	beq.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d075      	beq.n	800228a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800219e:	e082      	b.n	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07b      	beq.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a41      	ldr	r2, [pc, #260]	; (80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0c5b      	lsrs	r3, r3, #17
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80021e4:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	e004      	b.n	8002200 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220c:	d102      	bne.n	8002214 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	61bb      	str	r3, [r7, #24]
      break;
 8002212:	e04a      	b.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
      break;
 8002222:	e042      	b.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002234:	d108      	bne.n	8002248 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e01f      	b.n	8002288 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002252:	d109      	bne.n	8002268 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002260:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e00f      	b.n	8002288 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002272:	d11c      	bne.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002280:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002284:	61bb      	str	r3, [r7, #24]
      break;
 8002286:	e012      	b.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002288:	e011      	b.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800228a:	f7ff fe85 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0b9b      	lsrs	r3, r3, #14
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	61bb      	str	r3, [r7, #24]
      break;
 80022a4:	e004      	b.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80022ae:	bf00      	nop
    }
  }
  return (frequency);
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	080037e4 	.word	0x080037e4
 80022c4:	080037f4 	.word	0x080037f4
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	aaaaaaab 	.word	0xaaaaaaab

080022d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07a      	b.n	80023e0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7c5b      	ldrb	r3, [r3, #17]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fe92 	bl	8001024 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa96 	bl	8002838 <HAL_RTC_WaitForSynchro>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2204      	movs	r2, #4
 8002316:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e061      	b.n	80023e0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fb4f 	bl	80029c0 <RTC_EnterInitMode>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2204      	movs	r2, #4
 800232c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e056      	b.n	80023e0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0207 	bic.w	r2, r2, #7
 8002340:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RTC_Init+0x114>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_RTC_Init+0x114>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RTC_Init+0x114>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4921      	ldr	r1, [pc, #132]	; (80023e8 <HAL_RTC_Init+0x114>)
 8002364:	4313      	orrs	r3, r2
 8002366:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002370:	d003      	beq.n	800237a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e00e      	b.n	8002398 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff fef4 	bl	8002168 <HAL_RCCEx_GetPeriphCLKFreq>
 8002380:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e026      	b.n	80023e0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b01      	subs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0c1a      	lsrs	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f002 020f 	and.w	r2, r2, #15
 80023a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	b292      	uxth	r2, r2
 80023ae:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fb2d 	bl	8002a10 <RTC_ExitInitMode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2204      	movs	r2, #4
 80023c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00c      	b.n	80023e0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40006c00 	.word	0x40006c00

080023ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_RTC_SetTime+0x20>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e080      	b.n	8002512 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	7c1b      	ldrb	r3, [r3, #16]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_RTC_SetTime+0x30>
 8002418:	2302      	movs	r3, #2
 800241a:	e07a      	b.n	8002512 <HAL_RTC_SetTime+0x126>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d113      	bne.n	8002456 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002438:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	785b      	ldrb	r3, [r3, #1]
 8002440:	4619      	mov	r1, r3
 8002442:	460b      	mov	r3, r1
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a5b      	subs	r3, r3, r1
 8002448:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800244a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e01e      	b.n	8002494 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb1d 	bl	8002a9a <RTC_Bcd2ToByte>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002468:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fb12 	bl	8002a9a <RTC_Bcd2ToByte>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002482:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fb06 	bl	8002a9a <RTC_Bcd2ToByte>
 800248e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002490:	4423      	add	r3, r4
 8002492:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa2b 	bl	80028f2 <RTC_WriteTimeCounter>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2204      	movs	r2, #4
 80024a6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02f      	b.n	8002512 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0205 	bic.w	r2, r2, #5
 80024c0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa3c 	bl	8002940 <RTC_ReadAlarmCounter>
 80024c8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d0:	d018      	beq.n	8002504 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d214      	bcs.n	8002504 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80024e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024e4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80024e6:	6939      	ldr	r1, [r7, #16]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa42 	bl	8002972 <RTC_WriteAlarmCounter>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2204      	movs	r2, #4
 80024f8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e006      	b.n	8002512 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
	...

0800251c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RTC_GetTime+0x28>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b5      	b.n	80026b4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0ac      	b.n	80026b4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f999 	bl	8002892 <RTC_ReadTimeCounter>
 8002560:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4a55      	ldr	r2, [pc, #340]	; (80026bc <HAL_RTC_GetTime+0x1a0>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4b52      	ldr	r3, [pc, #328]	; (80026bc <HAL_RTC_GetTime+0x1a0>)
 8002572:	fba3 1302 	umull	r1, r3, r3, r2
 8002576:	0adb      	lsrs	r3, r3, #11
 8002578:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a4f      	ldr	r2, [pc, #316]	; (80026c0 <HAL_RTC_GetTime+0x1a4>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_RTC_GetTime+0x1a0>)
 8002594:	fba2 1203 	umull	r1, r2, r2, r3
 8002598:	0ad2      	lsrs	r2, r2, #11
 800259a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800259e:	fb01 f202 	mul.w	r2, r1, r2
 80025a2:	1a9a      	subs	r2, r3, r2
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RTC_GetTime+0x1a4>)
 80025a6:	fba3 1302 	umull	r1, r3, r3, r2
 80025aa:	0959      	lsrs	r1, r3, #5
 80025ac:	460b      	mov	r3, r1
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a5b      	subs	r3, r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	1ad1      	subs	r1, r2, r3
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b17      	cmp	r3, #23
 80025c0:	d955      	bls.n	800266e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_RTC_GetTime+0x1a8>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80025ce:	6939      	ldr	r1, [r7, #16]
 80025d0:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_RTC_GetTime+0x1a8>)
 80025d2:	fba3 2301 	umull	r2, r3, r3, r1
 80025d6:	091a      	lsrs	r2, r3, #4
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1aca      	subs	r2, r1, r3
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9a9 	bl	8002940 <RTC_ReadAlarmCounter>
 80025ee:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f6:	d008      	beq.n	800260a <HAL_RTC_GetTime+0xee>
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d904      	bls.n	800260a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e002      	b.n	8002610 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <HAL_RTC_GetTime+0x1ac>)
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f966 	bl	80028f2 <RTC_WriteTimeCounter>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e041      	b.n	80026b4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002636:	d00c      	beq.n	8002652 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002640:	69f9      	ldr	r1, [r7, #28]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f995 	bl	8002972 <RTC_WriteAlarmCounter>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e030      	b.n	80026b4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002652:	69f9      	ldr	r1, [r7, #28]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f98c 	bl	8002972 <RTC_WriteAlarmCounter>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e027      	b.n	80026b4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa34 	bl	8002ad4 <RTC_DateUpdate>
 800266c:	e003      	b.n	8002676 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01a      	beq.n	80026b2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f9ed 	bl	8002a60 <RTC_ByteToBcd2>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f9e4 	bl	8002a60 <RTC_ByteToBcd2>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f9db 	bl	8002a60 <RTC_ByteToBcd2>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	91a2b3c5 	.word	0x91a2b3c5
 80026c0:	88888889 	.word	0x88888889
 80026c4:	aaaaaaab 	.word	0xaaaaaaab
 80026c8:	00015180 	.word	0x00015180

080026cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RTC_SetDate+0x24>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e097      	b.n	8002824 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_RTC_SetDate+0x34>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e091      	b.n	8002824 <HAL_RTC_SetDate+0x158>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	78da      	ldrb	r2, [r3, #3]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785a      	ldrb	r2, [r3, #1]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	789a      	ldrb	r2, [r3, #2]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	739a      	strb	r2, [r3, #14]
 800272a:	e01a      	b.n	8002762 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	78db      	ldrb	r3, [r3, #3]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f9b2 	bl	8002a9a <RTC_Bcd2ToByte>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f9a9 	bl	8002a9a <RTC_Bcd2ToByte>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	789b      	ldrb	r3, [r3, #2]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f9a0 	bl	8002a9a <RTC_Bcd2ToByte>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	7bdb      	ldrb	r3, [r3, #15]
 8002766:	4618      	mov	r0, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7b59      	ldrb	r1, [r3, #13]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	7b9b      	ldrb	r3, [r3, #14]
 8002770:	461a      	mov	r2, r3
 8002772:	f000 fa8b 	bl	8002c8c <RTC_WeekDayNum>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	7b1a      	ldrb	r2, [r3, #12]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f883 	bl	8002892 <RTC_ReadTimeCounter>
 800278c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_RTC_SetDate+0x160>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b18      	cmp	r3, #24
 800279e:	d93a      	bls.n	8002816 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4a23      	ldr	r2, [pc, #140]	; (8002830 <HAL_RTC_SetDate+0x164>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	4a22      	ldr	r2, [pc, #136]	; (8002834 <HAL_RTC_SetDate+0x168>)
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027b6:	69f9      	ldr	r1, [r7, #28]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f89a 	bl	80028f2 <RTC_WriteTimeCounter>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2204      	movs	r2, #4
 80027c8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e027      	b.n	8002824 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f8b3 	bl	8002940 <RTC_ReadAlarmCounter>
 80027da:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e2:	d018      	beq.n	8002816 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d214      	bcs.n	8002816 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80027f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027f6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027f8:	69b9      	ldr	r1, [r7, #24]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8b9 	bl	8002972 <RTC_WriteAlarmCounter>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2204      	movs	r2, #4
 800280a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e006      	b.n	8002824 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	91a2b3c5 	.word	0x91a2b3c5
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	00015180 	.word	0x00015180

08002838 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e01d      	b.n	800288a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0208 	bic.w	r2, r2, #8
 800285c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800285e:	f7fe fce7 	bl	8001230 <HAL_GetTick>
 8002862:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002864:	e009      	b.n	800287a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002866:	f7fe fce3 	bl	8001230 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002874:	d901      	bls.n	800287a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e007      	b.n	800288a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002892:	b480      	push	{r7}
 8002894:	b087      	sub	sp, #28
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	827b      	strh	r3, [r7, #18]
 800289e:	2300      	movs	r3, #0
 80028a0:	823b      	strh	r3, [r7, #16]
 80028a2:	2300      	movs	r3, #0
 80028a4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80028c2:	8a7a      	ldrh	r2, [r7, #18]
 80028c4:	8a3b      	ldrh	r3, [r7, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d008      	beq.n	80028dc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80028ca:	8a3b      	ldrh	r3, [r7, #16]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e004      	b.n	80028e6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80028dc:	8a7b      	ldrh	r3, [r7, #18]
 80028de:	041a      	lsls	r2, r3, #16
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80028e6:	697b      	ldr	r3, [r7, #20]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f85d 	bl	80029c0 <RTC_EnterInitMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e011      	b.n	8002936 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	0c12      	lsrs	r2, r2, #16
 800291a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b292      	uxth	r2, r2
 8002924:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f872 	bl	8002a10 <RTC_ExitInitMode>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	81fb      	strh	r3, [r7, #14]
 800294c:	2300      	movs	r3, #0
 800294e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	041a      	lsls	r2, r3, #16
 8002964:	89bb      	ldrh	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f81d 	bl	80029c0 <RTC_EnterInitMode>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e011      	b.n	80029b6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	0c12      	lsrs	r2, r2, #16
 800299a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b292      	uxth	r2, r2
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f832 	bl	8002a10 <RTC_ExitInitMode>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80029cc:	f7fe fc30 	bl	8001230 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029d2:	e009      	b.n	80029e8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029d4:	f7fe fc2c 	bl	8001230 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e2:	d901      	bls.n	80029e8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e00f      	b.n	8002a08 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0210 	orr.w	r2, r2, #16
 8002a04:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002a2c:	f7fe fc00 	bl	8001230 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a32:	e009      	b.n	8002a48 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a34:	f7fe fbfc 	bl	8001230 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a42:	d901      	bls.n	8002a48 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e007      	b.n	8002a58 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002a6e:	e005      	b.n	8002a7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	3b0a      	subs	r3, #10
 8002a7a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d8f6      	bhi.n	8002a70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b2db      	uxtb	r3, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7bdb      	ldrb	r3, [r3, #15]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7b5b      	ldrb	r3, [r3, #13]
 8002af8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7b9b      	ldrb	r3, [r3, #14]
 8002afe:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e06f      	b.n	8002be6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d011      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d00e      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d00b      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b07      	cmp	r3, #7
 8002b1c:	d008      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d005      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b0a      	cmp	r3, #10
 8002b28:	d002      	beq.n	8002b30 <RTC_DateUpdate+0x5c>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d117      	bne.n	8002b60 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b1e      	cmp	r3, #30
 8002b34:	d803      	bhi.n	8002b3e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b3c:	e050      	b.n	8002be0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d005      	beq.n	8002b50 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	3301      	adds	r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b4e:	e047      	b.n	8002be0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b54:	2301      	movs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
          year++;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002b5e:	e03f      	b.n	8002be0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d008      	beq.n	8002b78 <RTC_DateUpdate+0xa4>
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d005      	beq.n	8002b78 <RTC_DateUpdate+0xa4>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	d002      	beq.n	8002b78 <RTC_DateUpdate+0xa4>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b0b      	cmp	r3, #11
 8002b76:	d10c      	bne.n	8002b92 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b1d      	cmp	r3, #29
 8002b7c:	d803      	bhi.n	8002b86 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b84:	e02c      	b.n	8002be0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b90:	e026      	b.n	8002be0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d123      	bne.n	8002be0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b1b      	cmp	r3, #27
 8002b9c:	d803      	bhi.n	8002ba6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e01c      	b.n	8002be0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b1c      	cmp	r3, #28
 8002baa:	d111      	bne.n	8002bd0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f839 	bl	8002c28 <RTC_IsLeapYear>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e00d      	b.n	8002be0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e007      	b.n	8002be0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b1d      	cmp	r3, #29
 8002bd4:	d104      	bne.n	8002be0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d38b      	bcc.n	8002b06 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f000 f83b 	bl	8002c8c <RTC_WeekDayNum>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	731a      	strb	r2, [r3, #12]
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e01d      	b.n	8002c7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <RTC_IsLeapYear+0x60>)
 8002c46:	fba2 1203 	umull	r1, r2, r2, r3
 8002c4a:	0952      	lsrs	r2, r2, #5
 8002c4c:	2164      	movs	r1, #100	; 0x64
 8002c4e:	fb01 f202 	mul.w	r2, r1, r2
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <RTC_IsLeapYear+0x60>)
 8002c62:	fba2 1203 	umull	r1, r2, r2, r3
 8002c66:	09d2      	lsrs	r2, r2, #7
 8002c68:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c6c:	fb01 f202 	mul.w	r2, r1, r2
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002c7c:	2300      	movs	r3, #0
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	51eb851f 	.word	0x51eb851f

08002c8c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002caa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d82d      	bhi.n	8002d0e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <RTC_WeekDayNum+0xe4>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	085a      	lsrs	r2, r3, #1
 8002cc6:	78bb      	ldrb	r3, [r7, #2]
 8002cc8:	441a      	add	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	441a      	add	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	4926      	ldr	r1, [pc, #152]	; (8002d74 <RTC_WeekDayNum+0xe8>)
 8002cdc:	fba1 1303 	umull	r1, r3, r1, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	1ad2      	subs	r2, r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4922      	ldr	r1, [pc, #136]	; (8002d74 <RTC_WeekDayNum+0xe8>)
 8002cea:	fba1 1303 	umull	r1, r3, r1, r3
 8002cee:	09db      	lsrs	r3, r3, #7
 8002cf0:	4413      	add	r3, r2
 8002cf2:	1d1a      	adds	r2, r3, #4
 8002cf4:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <RTC_WeekDayNum+0xec>)
 8002cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfa:	1ad1      	subs	r1, r2, r3
 8002cfc:	0849      	lsrs	r1, r1, #1
 8002cfe:	440b      	add	r3, r1
 8002d00:	0899      	lsrs	r1, r3, #2
 8002d02:	460b      	mov	r3, r1
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a5b      	subs	r3, r3, r1
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e029      	b.n	8002d62 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <RTC_WeekDayNum+0xe4>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	085a      	lsrs	r2, r3, #1
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	441a      	add	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	441a      	add	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4910      	ldr	r1, [pc, #64]	; (8002d74 <RTC_WeekDayNum+0xe8>)
 8002d34:	fba1 1303 	umull	r1, r3, r1, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <RTC_WeekDayNum+0xe8>)
 8002d40:	fba1 1303 	umull	r1, r3, r1, r3
 8002d44:	09db      	lsrs	r3, r3, #7
 8002d46:	4413      	add	r3, r2
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <RTC_WeekDayNum+0xec>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	1ad1      	subs	r1, r2, r3
 8002d52:	0849      	lsrs	r1, r1, #1
 8002d54:	440b      	add	r3, r1
 8002d56:	0899      	lsrs	r1, r3, #2
 8002d58:	460b      	mov	r3, r1
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a5b      	subs	r3, r3, r1
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	b2db      	uxtb	r3, r3
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	38e38e39 	.word	0x38e38e39
 8002d74:	51eb851f 	.word	0x51eb851f
 8002d78:	24924925 	.word	0x24924925

08002d7c <siprintf>:
 8002d7c:	b40e      	push	{r1, r2, r3}
 8002d7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d82:	b500      	push	{lr}
 8002d84:	b09c      	sub	sp, #112	; 0x70
 8002d86:	ab1d      	add	r3, sp, #116	; 0x74
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9006      	str	r0, [sp, #24]
 8002d8c:	9107      	str	r1, [sp, #28]
 8002d8e:	9104      	str	r1, [sp, #16]
 8002d90:	4808      	ldr	r0, [pc, #32]	; (8002db4 <siprintf+0x38>)
 8002d92:	4909      	ldr	r1, [pc, #36]	; (8002db8 <siprintf+0x3c>)
 8002d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d98:	9105      	str	r1, [sp, #20]
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	a902      	add	r1, sp, #8
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f000 f98e 	bl	80030c0 <_svfiprintf_r>
 8002da4:	2200      	movs	r2, #0
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	b01c      	add	sp, #112	; 0x70
 8002dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db0:	b003      	add	sp, #12
 8002db2:	4770      	bx	lr
 8002db4:	20000074 	.word	0x20000074
 8002db8:	ffff0208 	.word	0xffff0208

08002dbc <memset>:
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4402      	add	r2, r0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <memset+0xa>
 8002dc4:	4770      	bx	lr
 8002dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dca:	e7f9      	b.n	8002dc0 <memset+0x4>

08002dcc <__errno>:
 8002dcc:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <__errno+0x8>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000074 	.word	0x20000074

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	2600      	movs	r6, #0
 8002ddc:	4d0c      	ldr	r5, [pc, #48]	; (8002e10 <__libc_init_array+0x38>)
 8002dde:	4c0d      	ldr	r4, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002de0:	1b64      	subs	r4, r4, r5
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	f000 fc7a 	bl	80036e0 <_init>
 8002dec:	2600      	movs	r6, #0
 8002dee:	4d0a      	ldr	r5, [pc, #40]	; (8002e18 <__libc_init_array+0x40>)
 8002df0:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <__libc_init_array+0x44>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	0800382c 	.word	0x0800382c
 8002e14:	0800382c 	.word	0x0800382c
 8002e18:	0800382c 	.word	0x0800382c
 8002e1c:	08003830 	.word	0x08003830

08002e20 <__retarget_lock_acquire_recursive>:
 8002e20:	4770      	bx	lr

08002e22 <__retarget_lock_release_recursive>:
 8002e22:	4770      	bx	lr

08002e24 <_free_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4605      	mov	r5, r0
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d040      	beq.n	8002eae <_free_r+0x8a>
 8002e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e30:	1f0c      	subs	r4, r1, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfb8      	it	lt
 8002e36:	18e4      	addlt	r4, r4, r3
 8002e38:	f000 f8dc 	bl	8002ff4 <__malloc_lock>
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <_free_r+0x8c>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	b933      	cbnz	r3, 8002e50 <_free_r+0x2c>
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6014      	str	r4, [r2, #0]
 8002e46:	4628      	mov	r0, r5
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4c:	f000 b8d8 	b.w	8003000 <__malloc_unlock>
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d908      	bls.n	8002e66 <_free_r+0x42>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	1821      	adds	r1, r4, r0
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1809      	addeq	r1, r1, r0
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	e7ed      	b.n	8002e42 <_free_r+0x1e>
 8002e66:	461a      	mov	r2, r3
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b10b      	cbz	r3, 8002e70 <_free_r+0x4c>
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d9fa      	bls.n	8002e66 <_free_r+0x42>
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	1850      	adds	r0, r2, r1
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d10b      	bne.n	8002e90 <_free_r+0x6c>
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	4401      	add	r1, r0
 8002e7c:	1850      	adds	r0, r2, r1
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	6011      	str	r1, [r2, #0]
 8002e82:	d1e0      	bne.n	8002e46 <_free_r+0x22>
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4408      	add	r0, r1
 8002e8a:	6010      	str	r0, [r2, #0]
 8002e8c:	6053      	str	r3, [r2, #4]
 8002e8e:	e7da      	b.n	8002e46 <_free_r+0x22>
 8002e90:	d902      	bls.n	8002e98 <_free_r+0x74>
 8002e92:	230c      	movs	r3, #12
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	e7d6      	b.n	8002e46 <_free_r+0x22>
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	1821      	adds	r1, r4, r0
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf01      	itttt	eq
 8002ea0:	6819      	ldreq	r1, [r3, #0]
 8002ea2:	685b      	ldreq	r3, [r3, #4]
 8002ea4:	1809      	addeq	r1, r1, r0
 8002ea6:	6021      	streq	r1, [r4, #0]
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6054      	str	r4, [r2, #4]
 8002eac:	e7cb      	b.n	8002e46 <_free_r+0x22>
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	200001fc 	.word	0x200001fc

08002eb4 <sbrk_aligned>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4e0e      	ldr	r6, [pc, #56]	; (8002ef0 <sbrk_aligned+0x3c>)
 8002eb8:	460c      	mov	r4, r1
 8002eba:	6831      	ldr	r1, [r6, #0]
 8002ebc:	4605      	mov	r5, r0
 8002ebe:	b911      	cbnz	r1, 8002ec6 <sbrk_aligned+0x12>
 8002ec0:	f000 fbaa 	bl	8003618 <_sbrk_r>
 8002ec4:	6030      	str	r0, [r6, #0]
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f000 fba5 	bl	8003618 <_sbrk_r>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	d00a      	beq.n	8002ee8 <sbrk_aligned+0x34>
 8002ed2:	1cc4      	adds	r4, r0, #3
 8002ed4:	f024 0403 	bic.w	r4, r4, #3
 8002ed8:	42a0      	cmp	r0, r4
 8002eda:	d007      	beq.n	8002eec <sbrk_aligned+0x38>
 8002edc:	1a21      	subs	r1, r4, r0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 fb9a 	bl	8003618 <_sbrk_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d101      	bne.n	8002eec <sbrk_aligned+0x38>
 8002ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002eec:	4620      	mov	r0, r4
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	20000200 	.word	0x20000200

08002ef4 <_malloc_r>:
 8002ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef8:	1ccd      	adds	r5, r1, #3
 8002efa:	f025 0503 	bic.w	r5, r5, #3
 8002efe:	3508      	adds	r5, #8
 8002f00:	2d0c      	cmp	r5, #12
 8002f02:	bf38      	it	cc
 8002f04:	250c      	movcc	r5, #12
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	4607      	mov	r7, r0
 8002f0a:	db01      	blt.n	8002f10 <_malloc_r+0x1c>
 8002f0c:	42a9      	cmp	r1, r5
 8002f0e:	d905      	bls.n	8002f1c <_malloc_r+0x28>
 8002f10:	230c      	movs	r3, #12
 8002f12:	2600      	movs	r6, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4630      	mov	r0, r6
 8002f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ff0 <_malloc_r+0xfc>
 8002f20:	f000 f868 	bl	8002ff4 <__malloc_lock>
 8002f24:	f8d8 3000 	ldr.w	r3, [r8]
 8002f28:	461c      	mov	r4, r3
 8002f2a:	bb5c      	cbnz	r4, 8002f84 <_malloc_r+0x90>
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7ff ffc0 	bl	8002eb4 <sbrk_aligned>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	4604      	mov	r4, r0
 8002f38:	d155      	bne.n	8002fe6 <_malloc_r+0xf2>
 8002f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8002f3e:	4626      	mov	r6, r4
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	d145      	bne.n	8002fd0 <_malloc_r+0xdc>
 8002f44:	2c00      	cmp	r4, #0
 8002f46:	d048      	beq.n	8002fda <_malloc_r+0xe6>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	eb04 0903 	add.w	r9, r4, r3
 8002f52:	f000 fb61 	bl	8003618 <_sbrk_r>
 8002f56:	4581      	cmp	r9, r0
 8002f58:	d13f      	bne.n	8002fda <_malloc_r+0xe6>
 8002f5a:	6821      	ldr	r1, [r4, #0]
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	1a6d      	subs	r5, r5, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7ff ffa7 	bl	8002eb4 <sbrk_aligned>
 8002f66:	3001      	adds	r0, #1
 8002f68:	d037      	beq.n	8002fda <_malloc_r+0xe6>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	442b      	add	r3, r5
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	f8d8 3000 	ldr.w	r3, [r8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d038      	beq.n	8002fea <_malloc_r+0xf6>
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	42a2      	cmp	r2, r4
 8002f7c:	d12b      	bne.n	8002fd6 <_malloc_r+0xe2>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e00f      	b.n	8002fa4 <_malloc_r+0xb0>
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	1b52      	subs	r2, r2, r5
 8002f88:	d41f      	bmi.n	8002fca <_malloc_r+0xd6>
 8002f8a:	2a0b      	cmp	r2, #11
 8002f8c:	d917      	bls.n	8002fbe <_malloc_r+0xca>
 8002f8e:	1961      	adds	r1, r4, r5
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	6025      	str	r5, [r4, #0]
 8002f94:	bf18      	it	ne
 8002f96:	6059      	strne	r1, [r3, #4]
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	bf08      	it	eq
 8002f9c:	f8c8 1000 	streq.w	r1, [r8]
 8002fa0:	5162      	str	r2, [r4, r5]
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	f104 060b 	add.w	r6, r4, #11
 8002faa:	f000 f829 	bl	8003000 <__malloc_unlock>
 8002fae:	f026 0607 	bic.w	r6, r6, #7
 8002fb2:	1d23      	adds	r3, r4, #4
 8002fb4:	1af2      	subs	r2, r6, r3
 8002fb6:	d0ae      	beq.n	8002f16 <_malloc_r+0x22>
 8002fb8:	1b9b      	subs	r3, r3, r6
 8002fba:	50a3      	str	r3, [r4, r2]
 8002fbc:	e7ab      	b.n	8002f16 <_malloc_r+0x22>
 8002fbe:	42a3      	cmp	r3, r4
 8002fc0:	6862      	ldr	r2, [r4, #4]
 8002fc2:	d1dd      	bne.n	8002f80 <_malloc_r+0x8c>
 8002fc4:	f8c8 2000 	str.w	r2, [r8]
 8002fc8:	e7ec      	b.n	8002fa4 <_malloc_r+0xb0>
 8002fca:	4623      	mov	r3, r4
 8002fcc:	6864      	ldr	r4, [r4, #4]
 8002fce:	e7ac      	b.n	8002f2a <_malloc_r+0x36>
 8002fd0:	4634      	mov	r4, r6
 8002fd2:	6876      	ldr	r6, [r6, #4]
 8002fd4:	e7b4      	b.n	8002f40 <_malloc_r+0x4c>
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	e7cc      	b.n	8002f74 <_malloc_r+0x80>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	4638      	mov	r0, r7
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f000 f80e 	bl	8003000 <__malloc_unlock>
 8002fe4:	e797      	b.n	8002f16 <_malloc_r+0x22>
 8002fe6:	6025      	str	r5, [r4, #0]
 8002fe8:	e7dc      	b.n	8002fa4 <_malloc_r+0xb0>
 8002fea:	605b      	str	r3, [r3, #4]
 8002fec:	deff      	udf	#255	; 0xff
 8002fee:	bf00      	nop
 8002ff0:	200001fc 	.word	0x200001fc

08002ff4 <__malloc_lock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_lock+0x8>)
 8002ff6:	f7ff bf13 	b.w	8002e20 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	200001f8 	.word	0x200001f8

08003000 <__malloc_unlock>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__malloc_unlock+0x8>)
 8003002:	f7ff bf0e 	b.w	8002e22 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	200001f8 	.word	0x200001f8

0800300c <__ssputs_r>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	461f      	mov	r7, r3
 8003012:	688e      	ldr	r6, [r1, #8]
 8003014:	4682      	mov	sl, r0
 8003016:	42be      	cmp	r6, r7
 8003018:	460c      	mov	r4, r1
 800301a:	4690      	mov	r8, r2
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	d82c      	bhi.n	800307a <__ssputs_r+0x6e>
 8003020:	898a      	ldrh	r2, [r1, #12]
 8003022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003026:	d026      	beq.n	8003076 <__ssputs_r+0x6a>
 8003028:	6965      	ldr	r5, [r4, #20]
 800302a:	6909      	ldr	r1, [r1, #16]
 800302c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003030:	eba3 0901 	sub.w	r9, r3, r1
 8003034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003038:	1c7b      	adds	r3, r7, #1
 800303a:	444b      	add	r3, r9
 800303c:	106d      	asrs	r5, r5, #1
 800303e:	429d      	cmp	r5, r3
 8003040:	bf38      	it	cc
 8003042:	461d      	movcc	r5, r3
 8003044:	0553      	lsls	r3, r2, #21
 8003046:	d527      	bpl.n	8003098 <__ssputs_r+0x8c>
 8003048:	4629      	mov	r1, r5
 800304a:	f7ff ff53 	bl	8002ef4 <_malloc_r>
 800304e:	4606      	mov	r6, r0
 8003050:	b360      	cbz	r0, 80030ac <__ssputs_r+0xa0>
 8003052:	464a      	mov	r2, r9
 8003054:	6921      	ldr	r1, [r4, #16]
 8003056:	f000 fafd 	bl	8003654 <memcpy>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003064:	81a3      	strh	r3, [r4, #12]
 8003066:	6126      	str	r6, [r4, #16]
 8003068:	444e      	add	r6, r9
 800306a:	6026      	str	r6, [r4, #0]
 800306c:	463e      	mov	r6, r7
 800306e:	6165      	str	r5, [r4, #20]
 8003070:	eba5 0509 	sub.w	r5, r5, r9
 8003074:	60a5      	str	r5, [r4, #8]
 8003076:	42be      	cmp	r6, r7
 8003078:	d900      	bls.n	800307c <__ssputs_r+0x70>
 800307a:	463e      	mov	r6, r7
 800307c:	4632      	mov	r2, r6
 800307e:	4641      	mov	r1, r8
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	f000 faaf 	bl	80035e4 <memmove>
 8003086:	2000      	movs	r0, #0
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	1b9b      	subs	r3, r3, r6
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	4433      	add	r3, r6
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	462a      	mov	r2, r5
 800309a:	f000 fae9 	bl	8003670 <_realloc_r>
 800309e:	4606      	mov	r6, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1e0      	bne.n	8003066 <__ssputs_r+0x5a>
 80030a4:	4650      	mov	r0, sl
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f7ff febc 	bl	8002e24 <_free_r>
 80030ac:	230c      	movs	r3, #12
 80030ae:	f8ca 3000 	str.w	r3, [sl]
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	e7e9      	b.n	8003094 <__ssputs_r+0x88>

080030c0 <_svfiprintf_r>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	4698      	mov	r8, r3
 80030c6:	898b      	ldrh	r3, [r1, #12]
 80030c8:	4607      	mov	r7, r0
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	460d      	mov	r5, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	b09d      	sub	sp, #116	; 0x74
 80030d2:	d50e      	bpl.n	80030f2 <_svfiprintf_r+0x32>
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	b963      	cbnz	r3, 80030f2 <_svfiprintf_r+0x32>
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	f7ff ff0b 	bl	8002ef4 <_malloc_r>
 80030de:	6028      	str	r0, [r5, #0]
 80030e0:	6128      	str	r0, [r5, #16]
 80030e2:	b920      	cbnz	r0, 80030ee <_svfiprintf_r+0x2e>
 80030e4:	230c      	movs	r3, #12
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ec:	e0d0      	b.n	8003290 <_svfiprintf_r+0x1d0>
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	616b      	str	r3, [r5, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9309      	str	r3, [sp, #36]	; 0x24
 80030f6:	2320      	movs	r3, #32
 80030f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030fc:	2330      	movs	r3, #48	; 0x30
 80030fe:	f04f 0901 	mov.w	r9, #1
 8003102:	f8cd 800c 	str.w	r8, [sp, #12]
 8003106:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032a8 <_svfiprintf_r+0x1e8>
 800310a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800310e:	4623      	mov	r3, r4
 8003110:	469a      	mov	sl, r3
 8003112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003116:	b10a      	cbz	r2, 800311c <_svfiprintf_r+0x5c>
 8003118:	2a25      	cmp	r2, #37	; 0x25
 800311a:	d1f9      	bne.n	8003110 <_svfiprintf_r+0x50>
 800311c:	ebba 0b04 	subs.w	fp, sl, r4
 8003120:	d00b      	beq.n	800313a <_svfiprintf_r+0x7a>
 8003122:	465b      	mov	r3, fp
 8003124:	4622      	mov	r2, r4
 8003126:	4629      	mov	r1, r5
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff6f 	bl	800300c <__ssputs_r>
 800312e:	3001      	adds	r0, #1
 8003130:	f000 80a9 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003136:	445a      	add	r2, fp
 8003138:	9209      	str	r2, [sp, #36]	; 0x24
 800313a:	f89a 3000 	ldrb.w	r3, [sl]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a1 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003144:	2300      	movs	r3, #0
 8003146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800314a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314e:	f10a 0a01 	add.w	sl, sl, #1
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800315a:	931a      	str	r3, [sp, #104]	; 0x68
 800315c:	4654      	mov	r4, sl
 800315e:	2205      	movs	r2, #5
 8003160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003164:	4850      	ldr	r0, [pc, #320]	; (80032a8 <_svfiprintf_r+0x1e8>)
 8003166:	f000 fa67 	bl	8003638 <memchr>
 800316a:	9a04      	ldr	r2, [sp, #16]
 800316c:	b9d8      	cbnz	r0, 80031a6 <_svfiprintf_r+0xe6>
 800316e:	06d0      	lsls	r0, r2, #27
 8003170:	bf44      	itt	mi
 8003172:	2320      	movmi	r3, #32
 8003174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003178:	0711      	lsls	r1, r2, #28
 800317a:	bf44      	itt	mi
 800317c:	232b      	movmi	r3, #43	; 0x2b
 800317e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003182:	f89a 3000 	ldrb.w	r3, [sl]
 8003186:	2b2a      	cmp	r3, #42	; 0x2a
 8003188:	d015      	beq.n	80031b6 <_svfiprintf_r+0xf6>
 800318a:	4654      	mov	r4, sl
 800318c:	2000      	movs	r0, #0
 800318e:	f04f 0c0a 	mov.w	ip, #10
 8003192:	9a07      	ldr	r2, [sp, #28]
 8003194:	4621      	mov	r1, r4
 8003196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319a:	3b30      	subs	r3, #48	; 0x30
 800319c:	2b09      	cmp	r3, #9
 800319e:	d94d      	bls.n	800323c <_svfiprintf_r+0x17c>
 80031a0:	b1b0      	cbz	r0, 80031d0 <_svfiprintf_r+0x110>
 80031a2:	9207      	str	r2, [sp, #28]
 80031a4:	e014      	b.n	80031d0 <_svfiprintf_r+0x110>
 80031a6:	eba0 0308 	sub.w	r3, r0, r8
 80031aa:	fa09 f303 	lsl.w	r3, r9, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	46a2      	mov	sl, r4
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	e7d2      	b.n	800315c <_svfiprintf_r+0x9c>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	1d19      	adds	r1, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	9103      	str	r1, [sp, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfbb      	ittet	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	f042 0202 	orrlt.w	r2, r2, #2
 80031c8:	9307      	strge	r3, [sp, #28]
 80031ca:	9307      	strlt	r3, [sp, #28]
 80031cc:	bfb8      	it	lt
 80031ce:	9204      	strlt	r2, [sp, #16]
 80031d0:	7823      	ldrb	r3, [r4, #0]
 80031d2:	2b2e      	cmp	r3, #46	; 0x2e
 80031d4:	d10c      	bne.n	80031f0 <_svfiprintf_r+0x130>
 80031d6:	7863      	ldrb	r3, [r4, #1]
 80031d8:	2b2a      	cmp	r3, #42	; 0x2a
 80031da:	d134      	bne.n	8003246 <_svfiprintf_r+0x186>
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	3402      	adds	r4, #2
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	9203      	str	r2, [sp, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bfb8      	it	lt
 80031ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032ac <_svfiprintf_r+0x1ec>
 80031f4:	2203      	movs	r2, #3
 80031f6:	4650      	mov	r0, sl
 80031f8:	7821      	ldrb	r1, [r4, #0]
 80031fa:	f000 fa1d 	bl	8003638 <memchr>
 80031fe:	b138      	cbz	r0, 8003210 <_svfiprintf_r+0x150>
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	9b04      	ldr	r3, [sp, #16]
 8003204:	eba0 000a 	sub.w	r0, r0, sl
 8003208:	4082      	lsls	r2, r0
 800320a:	4313      	orrs	r3, r2
 800320c:	3401      	adds	r4, #1
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003214:	2206      	movs	r2, #6
 8003216:	4826      	ldr	r0, [pc, #152]	; (80032b0 <_svfiprintf_r+0x1f0>)
 8003218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800321c:	f000 fa0c 	bl	8003638 <memchr>
 8003220:	2800      	cmp	r0, #0
 8003222:	d038      	beq.n	8003296 <_svfiprintf_r+0x1d6>
 8003224:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <_svfiprintf_r+0x1f4>)
 8003226:	bb1b      	cbnz	r3, 8003270 <_svfiprintf_r+0x1b0>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	3307      	adds	r3, #7
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	9303      	str	r3, [sp, #12]
 8003234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003236:	4433      	add	r3, r6
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
 800323a:	e768      	b.n	800310e <_svfiprintf_r+0x4e>
 800323c:	460c      	mov	r4, r1
 800323e:	2001      	movs	r0, #1
 8003240:	fb0c 3202 	mla	r2, ip, r2, r3
 8003244:	e7a6      	b.n	8003194 <_svfiprintf_r+0xd4>
 8003246:	2300      	movs	r3, #0
 8003248:	f04f 0c0a 	mov.w	ip, #10
 800324c:	4619      	mov	r1, r3
 800324e:	3401      	adds	r4, #1
 8003250:	9305      	str	r3, [sp, #20]
 8003252:	4620      	mov	r0, r4
 8003254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003258:	3a30      	subs	r2, #48	; 0x30
 800325a:	2a09      	cmp	r2, #9
 800325c:	d903      	bls.n	8003266 <_svfiprintf_r+0x1a6>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c6      	beq.n	80031f0 <_svfiprintf_r+0x130>
 8003262:	9105      	str	r1, [sp, #20]
 8003264:	e7c4      	b.n	80031f0 <_svfiprintf_r+0x130>
 8003266:	4604      	mov	r4, r0
 8003268:	2301      	movs	r3, #1
 800326a:	fb0c 2101 	mla	r1, ip, r1, r2
 800326e:	e7f0      	b.n	8003252 <_svfiprintf_r+0x192>
 8003270:	ab03      	add	r3, sp, #12
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	462a      	mov	r2, r5
 8003276:	4638      	mov	r0, r7
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <_svfiprintf_r+0x1f8>)
 800327a:	a904      	add	r1, sp, #16
 800327c:	f3af 8000 	nop.w
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	4606      	mov	r6, r0
 8003284:	d1d6      	bne.n	8003234 <_svfiprintf_r+0x174>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	065b      	lsls	r3, r3, #25
 800328a:	f53f af2d 	bmi.w	80030e8 <_svfiprintf_r+0x28>
 800328e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003290:	b01d      	add	sp, #116	; 0x74
 8003292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003296:	ab03      	add	r3, sp, #12
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	462a      	mov	r2, r5
 800329c:	4638      	mov	r0, r7
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <_svfiprintf_r+0x1f8>)
 80032a0:	a904      	add	r1, sp, #16
 80032a2:	f000 f87d 	bl	80033a0 <_printf_i>
 80032a6:	e7eb      	b.n	8003280 <_svfiprintf_r+0x1c0>
 80032a8:	080037f6 	.word	0x080037f6
 80032ac:	080037fc 	.word	0x080037fc
 80032b0:	08003800 	.word	0x08003800
 80032b4:	00000000 	.word	0x00000000
 80032b8:	0800300d 	.word	0x0800300d

080032bc <_printf_common>:
 80032bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	4616      	mov	r6, r2
 80032c2:	4699      	mov	r9, r3
 80032c4:	688a      	ldr	r2, [r1, #8]
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	4607      	mov	r7, r0
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bfb8      	it	lt
 80032ce:	4613      	movlt	r3, r2
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032d6:	460c      	mov	r4, r1
 80032d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032dc:	b10a      	cbz	r2, 80032e2 <_printf_common+0x26>
 80032de:	3301      	adds	r3, #1
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	0699      	lsls	r1, r3, #26
 80032e6:	bf42      	ittt	mi
 80032e8:	6833      	ldrmi	r3, [r6, #0]
 80032ea:	3302      	addmi	r3, #2
 80032ec:	6033      	strmi	r3, [r6, #0]
 80032ee:	6825      	ldr	r5, [r4, #0]
 80032f0:	f015 0506 	ands.w	r5, r5, #6
 80032f4:	d106      	bne.n	8003304 <_printf_common+0x48>
 80032f6:	f104 0a19 	add.w	sl, r4, #25
 80032fa:	68e3      	ldr	r3, [r4, #12]
 80032fc:	6832      	ldr	r2, [r6, #0]
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	42ab      	cmp	r3, r5
 8003302:	dc2b      	bgt.n	800335c <_printf_common+0xa0>
 8003304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003308:	1e13      	subs	r3, r2, #0
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	bf18      	it	ne
 800330e:	2301      	movne	r3, #1
 8003310:	0692      	lsls	r2, r2, #26
 8003312:	d430      	bmi.n	8003376 <_printf_common+0xba>
 8003314:	4649      	mov	r1, r9
 8003316:	4638      	mov	r0, r7
 8003318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800331c:	47c0      	blx	r8
 800331e:	3001      	adds	r0, #1
 8003320:	d023      	beq.n	800336a <_printf_common+0xae>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	6922      	ldr	r2, [r4, #16]
 8003326:	f003 0306 	and.w	r3, r3, #6
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf14      	ite	ne
 800332e:	2500      	movne	r5, #0
 8003330:	6833      	ldreq	r3, [r6, #0]
 8003332:	f04f 0600 	mov.w	r6, #0
 8003336:	bf08      	it	eq
 8003338:	68e5      	ldreq	r5, [r4, #12]
 800333a:	f104 041a 	add.w	r4, r4, #26
 800333e:	bf08      	it	eq
 8003340:	1aed      	subeq	r5, r5, r3
 8003342:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003346:	bf08      	it	eq
 8003348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800334c:	4293      	cmp	r3, r2
 800334e:	bfc4      	itt	gt
 8003350:	1a9b      	subgt	r3, r3, r2
 8003352:	18ed      	addgt	r5, r5, r3
 8003354:	42b5      	cmp	r5, r6
 8003356:	d11a      	bne.n	800338e <_printf_common+0xd2>
 8003358:	2000      	movs	r0, #0
 800335a:	e008      	b.n	800336e <_printf_common+0xb2>
 800335c:	2301      	movs	r3, #1
 800335e:	4652      	mov	r2, sl
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d103      	bne.n	8003372 <_printf_common+0xb6>
 800336a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003372:	3501      	adds	r5, #1
 8003374:	e7c1      	b.n	80032fa <_printf_common+0x3e>
 8003376:	2030      	movs	r0, #48	; 0x30
 8003378:	18e1      	adds	r1, r4, r3
 800337a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003384:	4422      	add	r2, r4
 8003386:	3302      	adds	r3, #2
 8003388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800338c:	e7c2      	b.n	8003314 <_printf_common+0x58>
 800338e:	2301      	movs	r3, #1
 8003390:	4622      	mov	r2, r4
 8003392:	4649      	mov	r1, r9
 8003394:	4638      	mov	r0, r7
 8003396:	47c0      	blx	r8
 8003398:	3001      	adds	r0, #1
 800339a:	d0e6      	beq.n	800336a <_printf_common+0xae>
 800339c:	3601      	adds	r6, #1
 800339e:	e7d9      	b.n	8003354 <_printf_common+0x98>

080033a0 <_printf_i>:
 80033a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	7e0f      	ldrb	r7, [r1, #24]
 80033a6:	4691      	mov	r9, r2
 80033a8:	2f78      	cmp	r7, #120	; 0x78
 80033aa:	4680      	mov	r8, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	469a      	mov	sl, r3
 80033b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033b6:	d807      	bhi.n	80033c8 <_printf_i+0x28>
 80033b8:	2f62      	cmp	r7, #98	; 0x62
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x32>
 80033bc:	2f00      	cmp	r7, #0
 80033be:	f000 80d5 	beq.w	800356c <_printf_i+0x1cc>
 80033c2:	2f58      	cmp	r7, #88	; 0x58
 80033c4:	f000 80c1 	beq.w	800354a <_printf_i+0x1aa>
 80033c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d0:	e03a      	b.n	8003448 <_printf_i+0xa8>
 80033d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d6:	2b15      	cmp	r3, #21
 80033d8:	d8f6      	bhi.n	80033c8 <_printf_i+0x28>
 80033da:	a101      	add	r1, pc, #4	; (adr r1, 80033e0 <_printf_i+0x40>)
 80033dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033e0:	08003439 	.word	0x08003439
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	080033c9 	.word	0x080033c9
 80033ec:	080033c9 	.word	0x080033c9
 80033f0:	080033c9 	.word	0x080033c9
 80033f4:	080033c9 	.word	0x080033c9
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	080033c9 	.word	0x080033c9
 8003400:	080033c9 	.word	0x080033c9
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	08003553 	.word	0x08003553
 8003410:	08003479 	.word	0x08003479
 8003414:	0800350d 	.word	0x0800350d
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	08003575 	.word	0x08003575
 8003424:	080033c9 	.word	0x080033c9
 8003428:	08003479 	.word	0x08003479
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003515 	.word	0x08003515
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003448:	2301      	movs	r3, #1
 800344a:	e0a0      	b.n	800358e <_printf_i+0x1ee>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	0607      	lsls	r7, r0, #24
 8003452:	f103 0104 	add.w	r1, r3, #4
 8003456:	6029      	str	r1, [r5, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0xbe>
 800345a:	681e      	ldr	r6, [r3, #0]
 800345c:	e003      	b.n	8003466 <_printf_i+0xc6>
 800345e:	0646      	lsls	r6, r0, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0xba>
 8003462:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003466:	2e00      	cmp	r6, #0
 8003468:	da03      	bge.n	8003472 <_printf_i+0xd2>
 800346a:	232d      	movs	r3, #45	; 0x2d
 800346c:	4276      	negs	r6, r6
 800346e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003472:	230a      	movs	r3, #10
 8003474:	4859      	ldr	r0, [pc, #356]	; (80035dc <_printf_i+0x23c>)
 8003476:	e012      	b.n	800349e <_printf_i+0xfe>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	1d19      	adds	r1, r3, #4
 800347e:	6029      	str	r1, [r5, #0]
 8003480:	0605      	lsls	r5, r0, #24
 8003482:	d501      	bpl.n	8003488 <_printf_i+0xe8>
 8003484:	681e      	ldr	r6, [r3, #0]
 8003486:	e002      	b.n	800348e <_printf_i+0xee>
 8003488:	0641      	lsls	r1, r0, #25
 800348a:	d5fb      	bpl.n	8003484 <_printf_i+0xe4>
 800348c:	881e      	ldrh	r6, [r3, #0]
 800348e:	2f6f      	cmp	r7, #111	; 0x6f
 8003490:	bf0c      	ite	eq
 8003492:	2308      	moveq	r3, #8
 8003494:	230a      	movne	r3, #10
 8003496:	4851      	ldr	r0, [pc, #324]	; (80035dc <_printf_i+0x23c>)
 8003498:	2100      	movs	r1, #0
 800349a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349e:	6865      	ldr	r5, [r4, #4]
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	bfa8      	it	ge
 80034a4:	6821      	ldrge	r1, [r4, #0]
 80034a6:	60a5      	str	r5, [r4, #8]
 80034a8:	bfa4      	itt	ge
 80034aa:	f021 0104 	bicge.w	r1, r1, #4
 80034ae:	6021      	strge	r1, [r4, #0]
 80034b0:	b90e      	cbnz	r6, 80034b6 <_printf_i+0x116>
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d04b      	beq.n	800354e <_printf_i+0x1ae>
 80034b6:	4615      	mov	r5, r2
 80034b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034bc:	fb03 6711 	mls	r7, r3, r1, r6
 80034c0:	5dc7      	ldrb	r7, [r0, r7]
 80034c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034c6:	4637      	mov	r7, r6
 80034c8:	42bb      	cmp	r3, r7
 80034ca:	460e      	mov	r6, r1
 80034cc:	d9f4      	bls.n	80034b8 <_printf_i+0x118>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d10b      	bne.n	80034ea <_printf_i+0x14a>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07de      	lsls	r6, r3, #31
 80034d6:	d508      	bpl.n	80034ea <_printf_i+0x14a>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	6861      	ldr	r1, [r4, #4]
 80034dc:	4299      	cmp	r1, r3
 80034de:	bfde      	ittt	le
 80034e0:	2330      	movle	r3, #48	; 0x30
 80034e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034ea:	1b52      	subs	r2, r2, r5
 80034ec:	6122      	str	r2, [r4, #16]
 80034ee:	464b      	mov	r3, r9
 80034f0:	4621      	mov	r1, r4
 80034f2:	4640      	mov	r0, r8
 80034f4:	f8cd a000 	str.w	sl, [sp]
 80034f8:	aa03      	add	r2, sp, #12
 80034fa:	f7ff fedf 	bl	80032bc <_printf_common>
 80034fe:	3001      	adds	r0, #1
 8003500:	d14a      	bne.n	8003598 <_printf_i+0x1f8>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003506:	b004      	add	sp, #16
 8003508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	2778      	movs	r7, #120	; 0x78
 8003516:	4832      	ldr	r0, [pc, #200]	; (80035e0 <_printf_i+0x240>)
 8003518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	6829      	ldr	r1, [r5, #0]
 8003520:	061f      	lsls	r7, r3, #24
 8003522:	f851 6b04 	ldr.w	r6, [r1], #4
 8003526:	d402      	bmi.n	800352e <_printf_i+0x18e>
 8003528:	065f      	lsls	r7, r3, #25
 800352a:	bf48      	it	mi
 800352c:	b2b6      	uxthmi	r6, r6
 800352e:	07df      	lsls	r7, r3, #31
 8003530:	bf48      	it	mi
 8003532:	f043 0320 	orrmi.w	r3, r3, #32
 8003536:	6029      	str	r1, [r5, #0]
 8003538:	bf48      	it	mi
 800353a:	6023      	strmi	r3, [r4, #0]
 800353c:	b91e      	cbnz	r6, 8003546 <_printf_i+0x1a6>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f023 0320 	bic.w	r3, r3, #32
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	2310      	movs	r3, #16
 8003548:	e7a6      	b.n	8003498 <_printf_i+0xf8>
 800354a:	4824      	ldr	r0, [pc, #144]	; (80035dc <_printf_i+0x23c>)
 800354c:	e7e4      	b.n	8003518 <_printf_i+0x178>
 800354e:	4615      	mov	r5, r2
 8003550:	e7bd      	b.n	80034ce <_printf_i+0x12e>
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	6826      	ldr	r6, [r4, #0]
 8003556:	1d18      	adds	r0, r3, #4
 8003558:	6961      	ldr	r1, [r4, #20]
 800355a:	6028      	str	r0, [r5, #0]
 800355c:	0635      	lsls	r5, r6, #24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	d501      	bpl.n	8003566 <_printf_i+0x1c6>
 8003562:	6019      	str	r1, [r3, #0]
 8003564:	e002      	b.n	800356c <_printf_i+0x1cc>
 8003566:	0670      	lsls	r0, r6, #25
 8003568:	d5fb      	bpl.n	8003562 <_printf_i+0x1c2>
 800356a:	8019      	strh	r1, [r3, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	4615      	mov	r5, r2
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	e7bc      	b.n	80034ee <_printf_i+0x14e>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	2100      	movs	r1, #0
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	602a      	str	r2, [r5, #0]
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f859 	bl	8003638 <memchr>
 8003586:	b108      	cbz	r0, 800358c <_printf_i+0x1ec>
 8003588:	1b40      	subs	r0, r0, r5
 800358a:	6060      	str	r0, [r4, #4]
 800358c:	6863      	ldr	r3, [r4, #4]
 800358e:	6123      	str	r3, [r4, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003596:	e7aa      	b.n	80034ee <_printf_i+0x14e>
 8003598:	462a      	mov	r2, r5
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	47d0      	blx	sl
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0ad      	beq.n	8003502 <_printf_i+0x162>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	079b      	lsls	r3, r3, #30
 80035aa:	d413      	bmi.n	80035d4 <_printf_i+0x234>
 80035ac:	68e0      	ldr	r0, [r4, #12]
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	4298      	cmp	r0, r3
 80035b2:	bfb8      	it	lt
 80035b4:	4618      	movlt	r0, r3
 80035b6:	e7a6      	b.n	8003506 <_printf_i+0x166>
 80035b8:	2301      	movs	r3, #1
 80035ba:	4632      	mov	r2, r6
 80035bc:	4649      	mov	r1, r9
 80035be:	4640      	mov	r0, r8
 80035c0:	47d0      	blx	sl
 80035c2:	3001      	adds	r0, #1
 80035c4:	d09d      	beq.n	8003502 <_printf_i+0x162>
 80035c6:	3501      	adds	r5, #1
 80035c8:	68e3      	ldr	r3, [r4, #12]
 80035ca:	9903      	ldr	r1, [sp, #12]
 80035cc:	1a5b      	subs	r3, r3, r1
 80035ce:	42ab      	cmp	r3, r5
 80035d0:	dcf2      	bgt.n	80035b8 <_printf_i+0x218>
 80035d2:	e7eb      	b.n	80035ac <_printf_i+0x20c>
 80035d4:	2500      	movs	r5, #0
 80035d6:	f104 0619 	add.w	r6, r4, #25
 80035da:	e7f5      	b.n	80035c8 <_printf_i+0x228>
 80035dc:	08003807 	.word	0x08003807
 80035e0:	08003818 	.word	0x08003818

080035e4 <memmove>:
 80035e4:	4288      	cmp	r0, r1
 80035e6:	b510      	push	{r4, lr}
 80035e8:	eb01 0402 	add.w	r4, r1, r2
 80035ec:	d902      	bls.n	80035f4 <memmove+0x10>
 80035ee:	4284      	cmp	r4, r0
 80035f0:	4623      	mov	r3, r4
 80035f2:	d807      	bhi.n	8003604 <memmove+0x20>
 80035f4:	1e43      	subs	r3, r0, #1
 80035f6:	42a1      	cmp	r1, r4
 80035f8:	d008      	beq.n	800360c <memmove+0x28>
 80035fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003602:	e7f8      	b.n	80035f6 <memmove+0x12>
 8003604:	4601      	mov	r1, r0
 8003606:	4402      	add	r2, r0
 8003608:	428a      	cmp	r2, r1
 800360a:	d100      	bne.n	800360e <memmove+0x2a>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003616:	e7f7      	b.n	8003608 <memmove+0x24>

08003618 <_sbrk_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	2300      	movs	r3, #0
 800361c:	4d05      	ldr	r5, [pc, #20]	; (8003634 <_sbrk_r+0x1c>)
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fd fd4a 	bl	80010bc <_sbrk>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_sbrk_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_sbrk_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	200001f4 	.word	0x200001f4

08003638 <memchr>:
 8003638:	4603      	mov	r3, r0
 800363a:	b510      	push	{r4, lr}
 800363c:	b2c9      	uxtb	r1, r1
 800363e:	4402      	add	r2, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	4618      	mov	r0, r3
 8003644:	d101      	bne.n	800364a <memchr+0x12>
 8003646:	2000      	movs	r0, #0
 8003648:	e003      	b.n	8003652 <memchr+0x1a>
 800364a:	7804      	ldrb	r4, [r0, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	428c      	cmp	r4, r1
 8003650:	d1f6      	bne.n	8003640 <memchr+0x8>
 8003652:	bd10      	pop	{r4, pc}

08003654 <memcpy>:
 8003654:	440a      	add	r2, r1
 8003656:	4291      	cmp	r1, r2
 8003658:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800365c:	d100      	bne.n	8003660 <memcpy+0xc>
 800365e:	4770      	bx	lr
 8003660:	b510      	push	{r4, lr}
 8003662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003666:	4291      	cmp	r1, r2
 8003668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800366c:	d1f9      	bne.n	8003662 <memcpy+0xe>
 800366e:	bd10      	pop	{r4, pc}

08003670 <_realloc_r>:
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	4680      	mov	r8, r0
 8003676:	4614      	mov	r4, r2
 8003678:	460e      	mov	r6, r1
 800367a:	b921      	cbnz	r1, 8003686 <_realloc_r+0x16>
 800367c:	4611      	mov	r1, r2
 800367e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003682:	f7ff bc37 	b.w	8002ef4 <_malloc_r>
 8003686:	b92a      	cbnz	r2, 8003694 <_realloc_r+0x24>
 8003688:	f7ff fbcc 	bl	8002e24 <_free_r>
 800368c:	4625      	mov	r5, r4
 800368e:	4628      	mov	r0, r5
 8003690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003694:	f000 f81b 	bl	80036ce <_malloc_usable_size_r>
 8003698:	4284      	cmp	r4, r0
 800369a:	4607      	mov	r7, r0
 800369c:	d802      	bhi.n	80036a4 <_realloc_r+0x34>
 800369e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036a2:	d812      	bhi.n	80036ca <_realloc_r+0x5a>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4640      	mov	r0, r8
 80036a8:	f7ff fc24 	bl	8002ef4 <_malloc_r>
 80036ac:	4605      	mov	r5, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0ed      	beq.n	800368e <_realloc_r+0x1e>
 80036b2:	42bc      	cmp	r4, r7
 80036b4:	4622      	mov	r2, r4
 80036b6:	4631      	mov	r1, r6
 80036b8:	bf28      	it	cs
 80036ba:	463a      	movcs	r2, r7
 80036bc:	f7ff ffca 	bl	8003654 <memcpy>
 80036c0:	4631      	mov	r1, r6
 80036c2:	4640      	mov	r0, r8
 80036c4:	f7ff fbae 	bl	8002e24 <_free_r>
 80036c8:	e7e1      	b.n	800368e <_realloc_r+0x1e>
 80036ca:	4635      	mov	r5, r6
 80036cc:	e7df      	b.n	800368e <_realloc_r+0x1e>

080036ce <_malloc_usable_size_r>:
 80036ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d2:	1f18      	subs	r0, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bfbc      	itt	lt
 80036d8:	580b      	ldrlt	r3, [r1, r0]
 80036da:	18c0      	addlt	r0, r0, r3
 80036dc:	4770      	bx	lr
	...

080036e0 <_init>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr

080036ec <_fini>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr
